<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.1" created="2014-08-16 14:10" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Cyber KinetX</title>
	<link>http://www.blog.cyberkinetx.com</link>
	<description>make the world a better place for developers</description>
	<pubDate>Sat, 16 Aug 2014 14:10:01 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.blog.cyberkinetx.com</wp:base_site_url>
	<wp:base_blog_url>http://www.blog.cyberkinetx.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>haiduc32@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Radu]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>10</wp:term_id><wp:category_nicename>code-art</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Code Art]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>29</wp:term_id><wp:category_nicename>codeproject</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[CodeProject]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>27</wp:term_id><wp:category_nicename>concept</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Concept]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>14</wp:term_id><wp:category_nicename>entity-framework</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Entity Framework]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>hall-of-fame</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Hall of Fame]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>17</wp:term_id><wp:category_nicename>projects</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Projects]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>37</wp:term_id><wp:category_nicename>reviews</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Reviews]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>auto-mapping</wp:tag_slug><wp:tag_name><![CDATA[auto mapping]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>automapper</wp:tag_slug><wp:tag_name><![CDATA[automapper]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>4</wp:term_id><wp:tag_slug>bad-code</wp:tag_slug><wp:tag_name><![CDATA[bad code]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>33</wp:term_id><wp:tag_slug>brain-teaser</wp:tag_slug><wp:tag_name><![CDATA[brain teaser]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>32</wp:term_id><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[c#]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>ef</wp:tag_slug><wp:tag_name><![CDATA[EF]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>25</wp:term_id><wp:tag_slug>efexensions</wp:tag_slug><wp:tag_name><![CDATA[EFExensions]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>35</wp:term_id><wp:tag_slug>electronic</wp:tag_slug><wp:tag_name><![CDATA[electronic]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>entity-framework</wp:tag_slug><wp:tag_name><![CDATA[Entity Framework]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>6</wp:term_id><wp:tag_slug>fail</wp:tag_slug><wp:tag_name><![CDATA[fail]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>flicker</wp:tag_slug><wp:tag_name><![CDATA[Flicker]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>5</wp:term_id><wp:tag_slug>hall-of-fame-2</wp:tag_slug><wp:tag_name><![CDATA[hall of fame]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>7</wp:term_id><wp:tag_slug>hdmi</wp:tag_slug><wp:tag_name><![CDATA[HDMI]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>health</wp:tag_slug><wp:tag_name><![CDATA[health]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>31</wp:term_id><wp:tag_slug>inversion-of-control</wp:tag_slug><wp:tag_name><![CDATA[Inversion of Control]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>30</wp:term_id><wp:tag_slug>ioc</wp:tag_slug><wp:tag_name><![CDATA[IoC]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>38</wp:term_id><wp:tag_slug>keyboard</wp:tag_slug><wp:tag_name><![CDATA[keyboard]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>36</wp:term_id><wp:tag_slug>led</wp:tag_slug><wp:tag_name><![CDATA[led]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>24</wp:term_id><wp:tag_slug>linq</wp:tag_slug><wp:tag_name><![CDATA[LINQ]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>mextmap</wp:tag_slug><wp:tag_name><![CDATA[mextmap]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>34</wp:term_id><wp:tag_slug>netduino</wp:tag_slug><wp:tag_name><![CDATA[netduino]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>21</wp:term_id><wp:tag_slug>nextmap</wp:tag_slug><wp:tag_name><![CDATA[nextmap]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>28</wp:term_id><wp:tag_slug>preemptive-ui</wp:tag_slug><wp:tag_name><![CDATA[preemptive ui]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>26</wp:term_id><wp:tag_slug>price-tracking</wp:tag_slug><wp:tag_name><![CDATA[price tracking]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>39</wp:term_id><wp:tag_slug>typematrix</wp:tag_slug><wp:tag_name><![CDATA[typematrix]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>unit-of-work</wp:tag_slug><wp:tag_name><![CDATA[Unit Of Work]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>unit-testing</wp:tag_slug><wp:tag_name><![CDATA[unit testing]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>unitofwork</wp:tag_slug><wp:tag_name><![CDATA[unitofwork]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>ut</wp:tag_slug><wp:tag_name><![CDATA[ut]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>vga</wp:tag_slug><wp:tag_name><![CDATA[VGA]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>work-place</wp:tag_slug><wp:tag_name><![CDATA[work place]]></wp:tag_name></wp:tag>

	<generator>http://wordpress.org/?v=3.5.1</generator>

	<item>
		<title>The Code Quality Myth</title>
		<link>http://www.blog.cyberkinetx.com/?p=13</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[The Code Quality Myth http://www.artima.com/weblogs/viewpost.jsp?thread=96154]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2010-11-13 17:20:50</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Disclaimer</title>
		<link>http://www.blog.cyberkinetx.com/disclaimer/</link>
		<pubDate>Sun, 15 May 2011 13:31:02 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/</guid>
		<description></description>
		<content:encoded><![CDATA[Heretofore and unto now, this blogger hosted weblog has had to rely exclusively on the blanket disclaimer provided for the corporate body of blog*spot addresses. While this kind of disclaimer is usually sufficient to protect a blogger from liability, it falls short when dealing with inherently offensive content, websites with a mind of their own and authors who are excessively paranoid about being dragged into court. With the above firmly borne in mind, we propose the following weblog disclaimer:

Http://blog.cyberkinetx.com (hereafter “this website”) will abide by, adhere to, accept responsibility for, endure under and act with respect toward the following weblog disclaimer:

By accessing this website, a web browser (hereafter user) is consents that s/he is familiar with, understands and absolutely accepts the following weblog disclaimer:

The views expressed by the authors on this website do not necessarily reflect the views of this website, those who link to this website, the author’s mother, father, sister, brother, uncle, aunt, grandparents, cousins, step relations, any other blood relative and the author himself, this website’s web host, template designer, or any other organization, service, motto, logo, insignia or avatar in any way connected with this website.

Comments on this website are the sole responsibility of their writers and the writer will take full responsibility, liability, and blame for any libel or litigation that results from something written in or as a direct result of something written in a comment. The accuracy, completeness, veracity, honesty, exactitude, factuality and politeness of comments are not guaranteed.

All trademarks, service marks, collective marks, design rights, personality rights, copyrights, registered names, mottos, logos, avatars, insignias and marks used or cited by this website are the property of their respective owners and this website in no way accepts any responsibility for an infringement on one of the above.

Although it may claim otherwise, this website does not offer legal, medical, psychiatric, veterinary, gynecological, archaeological, astronomical, astrological, ontological, paleontological, philosophical, axiological, audiological, bacteriological, mineralogical, criminological, terminological, dermatological, ecclesiastical, campanological, phrenological, phonological, technological, hematological, campanological, neurological, psychobiological, urological, ufological, typological,, mythological, hydrological, xylological, zoological, logical or any other kind of professional advice. Nothing on this website should be construed as professional advice including, but not limited to, the above list.

The information provided on this website is of a general, broad, sweeping, large, wide-ranging, wide-reaching and wide-spread nature and cannot substitute for the advice of a licensed professional or chiropractor. A competent authority with specialized knowledge is the only one who can address the specific circumstances of your predicament. We can try, but this disclaimer frees us of any liability if negative consequences result from our efforts.

Please contact your local bar association, law society, neighborhood association of jurists, medical board, county hospital, phone book, online directory, local emergency number in your jurisdiction, mother or Google to find a or obtain a referral to a competent professional. If you do not have reasonable means of contacting an attorney-at-law, lawyer, civil law notary, barrister, solicitor, medical professional, coroner or any other professional in the area of your inquiry, meaning you are an orphaned, computer-illiterate social hazard, please exit this window and get your life in order.

This website has no control over the information you access via outbound link(s) in the post text, sidebar, header, footer or comment sections. This website does not endorse linked website(s), cannot guarantee the accuracy of any information found by following said links or the correctness of any analysis found therein and should not be held responsible for it or the consequences of a user’s use of that information. If you are curious about the veracity of something you find, please follow the directions in the above paragraph and consult the appropriate experts.

This website may inadvertently link to content that is obscene, prurient, useless, hate-filled, poisonous, pornographic, frivolous, empty, rotten, bad, disgusting, hostile, repulsive, virulent, infectious, malignant, antagonistic, irritating, obnoxious, harsh, embittered, rancorous, resentful, acrimonious, pestilential, baneful, noxious, toxic, venomous, pernicious or repetitive. This website in no way condones, endorses or takes responsibility for such content.

This website publishes content regularly and said content is maintained in reference to the protections afforded it under local, provincial, state, martial, federal, international and mafia law. Publication of information found on this website may be in violation of the laws of the city, county, state, country or other jurisdiction from where you are viewing this website’s content and laws in your jurisdiction may not protect or allow the same kinds of speech or distribution. In the case that the laws of the jurisdiction where this website’s content is maintained and those of yours conflict, this website does not encourage, condone, facilitate, recommend or protect the violation of any laws and cannot be responsible for any violations of such laws.

Because the World Wide Web is an integrated net of communication, discussion and litigation, this website encourages the distribution of its content. Cross, reciprocal or just plain friendly hyperlinking is consistent with this information sharing and this disclaimer should not be construed as a condemnation of any linking practices. That said, any reproduction of this website’s content must credit the website by name and Uniform Resource Locator (URL). Should you link to this domain or use, reproduce, republish, regurgitate, repeat, reiterate, rebound, reecho, reverberate, mimic, imitate, parrot or duplicate the information contained on this website, you alone are responsible for that action and should, under threat of litigation, credit this website by name and URL.

This website is not recommended for inmates, ingrates or anyone professing an irrational fear of cats or any other mammal, those who have a penchant for time wasting, illiterates and lawyers. Women who are pregnant or may become pregnant or are nursing are advised to consult their husband and physician before reading this website. Eating before reading may result in unhealthy indigestion. Not recommended for people over the age of 120.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2011-05-15 15:31:02</wp:post_date>
		<wp:post_date_gmt>2011-05-15 13:31:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>disclaimer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NextMap</title>
		<link>http://www.blog.cyberkinetx.com/2011/04/10/nextmap/nextmap/</link>
		<pubDate>Sun, 10 Apr 2011 14:20:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/04/NextMap.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>50</wp:post_id>
		<wp:post_date>2011-04-10 16:20:50</wp:post_date>
		<wp:post_date_gmt>2011-04-10 14:20:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nextmap</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>49</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/04/NextMap.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/04/NextMap.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"677";s:6:"height";s:3:"342";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:19:"2011/04/NextMap.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:19:"NextMap-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:19:"NextMap-300x151.png";s:5:"width";s:3:"300";s:6:"height";s:3:"151";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NextMap</title>
		<link>http://www.blog.cyberkinetx.com/2011/04/10/nextmap/nextmap-2/</link>
		<pubDate>Sun, 10 Apr 2011 14:33:04 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/04/NextMap1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2011-04-10 16:33:04</wp:post_date>
		<wp:post_date_gmt>2011-04-10 14:33:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nextmap-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>49</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/04/NextMap1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/04/NextMap1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"677";s:6:"height";s:3:"342";s:14:"hwstring_small";s:23:"height='64' width='128'";s:4:"file";s:20:"2011/04/NextMap1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"NextMap1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"NextMap1-300x151.png";s:5:"width";s:3:"300";s:6:"height";s:3:"151";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>NextMap v0.01</title>
		<link>http://www.blog.cyberkinetx.com/2011/05/09/nextmap-v0-01/nextmap_v0-01/</link>
		<pubDate>Sun, 08 May 2011 10:30:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/05/NextMap_v0.01.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2011-05-08 12:30:10</wp:post_date>
		<wp:post_date_gmt>2011-05-08 10:30:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nextmap_v0-01</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>60</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/05/NextMap_v0.01.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/NextMap_v0.01.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PreemptiveTestApplication</title>
		<link>http://www.blog.cyberkinetx.com/2011/05/15/preemptive-ui/preemptivetestapplication/</link>
		<pubDate>Sun, 15 May 2011 16:54:01 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/05/PreemptiveTestApplication.zip</guid>
		<description></description>
		<content:encoded><![CDATA[Preemtive test application source code]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2011-05-15 18:54:01</wp:post_date>
		<wp:post_date_gmt>2011-05-15 16:54:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preemptivetestapplication</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>58</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/05/PreemptiveTestApplication.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/05/PreemptiveTestApplication.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EFExtensions</title>
		<link>http://www.blog.cyberkinetx.com/2011/08/18/entity-framework-and-oracle-boolean/efextensions/</link>
		<pubDate>Thu, 18 Aug 2011 19:47:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/EFExtensions.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2011-08-18 21:47:53</wp:post_date>
		<wp:post_date_gmt>2011-08-18 19:47:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>efextensions</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>75</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/EFExtensions.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/EFExtensions.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Attributes list</title>
		<link>http://www.blog.cyberkinetx.com/2011/08/21/entity-framework-and-enums-aka-efextensions/attr1/</link>
		<pubDate>Sun, 21 Aug 2011 12:32:29 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/attr1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2011-08-21 14:32:29</wp:post_date>
		<wp:post_date_gmt>2011-08-21 12:32:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>attr1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>78</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/attr1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/attr1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"734";s:6:"height";s:3:"479";s:14:"hwstring_small";s:23:"height='83' width='128'";s:4:"file";s:17:"2011/08/attr1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:17:"attr1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:17:"attr1-300x195.png";s:5:"width";s:3:"300";s:6:"height";s:3:"195";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Adding a complex type</title>
		<link>http://www.blog.cyberkinetx.com/2011/08/21/entity-framework-and-enums-aka-efextensions/complex1/</link>
		<pubDate>Sun, 21 Aug 2011 13:25:03 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2011-08-21 15:25:03</wp:post_date>
		<wp:post_date_gmt>2011-08-21 13:25:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>complex1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>78</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/complex1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"682";s:6:"height";s:3:"538";s:14:"hwstring_small";s:23:"height='96' width='121'";s:4:"file";s:20:"2011/08/complex1.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"complex1-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"complex1-300x236.png";s:5:"width";s:3:"300";s:6:"height";s:3:"236";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Value property name</title>
		<link>http://www.blog.cyberkinetx.com/2011/08/21/entity-framework-and-enums-aka-efextensions/complex2/</link>
		<pubDate>Sun, 21 Aug 2011 13:31:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2011-08-21 15:31:25</wp:post_date>
		<wp:post_date_gmt>2011-08-21 13:31:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>complex2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>78</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/complex2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"239";s:6:"height";s:3:"319";s:14:"hwstring_small";s:22:"height='96' width='71'";s:4:"file";s:20:"2011/08/complex2.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"complex2-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"complex2-224x300.png";s:5:"width";s:3:"224";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Setting attributes</title>
		<link>http://www.blog.cyberkinetx.com/2011/08/21/entity-framework-and-enums-aka-efextensions/complex3/</link>
		<pubDate>Sun, 21 Aug 2011 13:37:40 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2011-08-21 15:37:40</wp:post_date>
		<wp:post_date_gmt>2011-08-21 13:37:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>complex3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>78</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/08/complex3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"981";s:6:"height";s:3:"417";s:14:"hwstring_small";s:23:"height='54' width='128'";s:4:"file";s:20:"2011/08/complex3.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"complex3-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"complex3-300x127.png";s:5:"width";s:3:"300";s:6:"height";s:3:"127";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XmlConfigMergeConsole</title>
		<link>http://www.blog.cyberkinetx.com/2011/10/24/prepare-your-config-for-deployment/xmlconfigmergeconsole/</link>
		<pubDate>Sun, 23 Oct 2011 18:53:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2011/10/XmlConfigMergeConsole.exe</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2011-10-23 20:53:18</wp:post_date>
		<wp:post_date_gmt>2011-10-23 18:53:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmlconfigmergeconsole</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>96</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2011/10/XmlConfigMergeConsole.exe</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2011/10/XmlConfigMergeConsole.exe]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TypeMatrix 2020</title>
		<link>http://www.blog.cyberkinetx.com/2012/06/09/typematrix-2020-review/dsc_1944/</link>
		<pubDate>Sat, 09 Jun 2012 10:39:33 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/DSC_1944.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2012-06-09 12:39:33</wp:post_date>
		<wp:post_date_gmt>2012-06-09 10:39:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dsc_1944</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>115</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/DSC_1944.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/DSC_1944.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1024";s:6:"height";s:3:"678";s:14:"hwstring_small";s:23:"height='84' width='128'";s:4:"file";s:20:"2012/06/DSC_1944.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"DSC_1944-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"DSC_1944-300x198.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"198";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"4.5";s:6:"credit";s:0:"";s:6:"camera";s:11:"NIKON D7000";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1339205081";s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"34";s:3:"iso";s:3:"800";s:13:"shutter_speed";s:4:"0.05";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TypeMatrix vs K350</title>
		<link>http://www.blog.cyberkinetx.com/2012/06/09/typematrix-2020-review/dsc_1945/</link>
		<pubDate>Sat, 09 Jun 2012 10:43:55 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/DSC_1945.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2012-06-09 12:43:55</wp:post_date>
		<wp:post_date_gmt>2012-06-09 10:43:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dsc_1945</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>115</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/DSC_1945.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/DSC_1945.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"1024";s:6:"height";s:3:"678";s:14:"hwstring_small";s:23:"height='84' width='128'";s:4:"file";s:20:"2012/06/DSC_1945.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:20:"DSC_1945-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:20:"DSC_1945-300x198.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"198";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"4";s:6:"credit";s:0:"";s:6:"camera";s:11:"NIKON D7000";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1339205121";s:9:"copyright";s:0:"";s:12:"focal_length";s:2:"24";s:3:"iso";s:3:"800";s:13:"shutter_speed";s:3:"0.1";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SignalR Demo application</title>
		<link>http://www.blog.cyberkinetx.com/2012/06/16/signalr-the-power-of-websocket-at-your-fingertips/webapplication2/</link>
		<pubDate>Sat, 16 Jun 2012 20:41:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/WebApplication2.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2012-06-16 22:41:12</wp:post_date>
		<wp:post_date_gmt>2012-06-16 20:41:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>webapplication2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>119</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/WebApplication2.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/06/WebApplication2.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>wpid-1342886970879.jpg</title>
		<link>http://www.blog.cyberkinetx.com/?attachment_id=130</link>
		<pubDate>Sat, 21 Jul 2012 16:09:56 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2012/07/wpid-1342886970879.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2012-07-21 18:09:56</wp:post_date>
		<wp:post_date_gmt>2012-07-21 16:09:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wpid-1342886970879-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>131</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2012/07/wpid-1342886970879.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/wpid-1342886970879.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"500";s:6:"height";s:3:"375";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:30:"2012/07/wpid-1342886970879.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"wpid-1342886970879-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"wpid-1342886970879-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>hbridge</title>
		<link>http://www.blog.cyberkinetx.com/?attachment_id=132</link>
		<pubDate>Thu, 26 Jul 2012 17:28:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2012/07/hbridge.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>132</wp:post_id>
		<wp:post_date>2012-07-26 19:28:25</wp:post_date>
		<wp:post_date_gmt>2012-07-26 17:28:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hbridge</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2012/07/hbridge.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/hbridge.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"735";s:6:"height";s:3:"907";s:14:"hwstring_small";s:22:"height='96' width='77'";s:4:"file";s:19:"2012/07/hbridge.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:19:"hbridge-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:19:"hbridge-243x300.png";s:5:"width";s:3:"243";s:6:"height";s:3:"300";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DownCasting</title>
		<link>http://www.blog.cyberkinetx.com/2012/07/30/net-down-casting/downcasting/</link>
		<pubDate>Sun, 29 Jul 2012 17:52:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2012/07/DownCasting.zip</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2012-07-29 19:52:50</wp:post_date>
		<wp:post_date_gmt>2012-07-29 17:52:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>downcasting</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>135</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2012/07/DownCasting.zip</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/07/DownCasting.zip]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20120923_160459</title>
		<link>http://www.blog.cyberkinetx.com/?attachment_id=139</link>
		<pubDate>Sun, 23 Sep 2012 13:12:46 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2012/09/20120923_160459.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2012-09-23 15:12:46</wp:post_date>
		<wp:post_date_gmt>2012-09-23 13:12:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>20120923_160459</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2012/09/20120923_160459.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/09/20120923_160459.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3264";s:6:"height";s:4:"2448";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:27:"2012/09/20120923_160459.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"20120923_160459-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"20120923_160459-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:5:"large";a:3:{s:4:"file";s:28:"20120923_160459-1024x768.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"768";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"2.6";s:6:"credit";s:0:"";s:6:"camera";s:8:"GT-I9300";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1348416299";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"3.7";s:3:"iso";s:3:"100";s:13:"shutter_speed";s:4:"0.02";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>20120923_154314</title>
		<link>http://www.blog.cyberkinetx.com/?attachment_id=140</link>
		<pubDate>Sun, 23 Sep 2012 15:43:32 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/wp-content/uploads/2012/09/20120923_154314.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2012-09-23 17:43:32</wp:post_date>
		<wp:post_date_gmt>2012-09-23 15:43:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>20120923_154314</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://www.blog.cyberkinetx.com/wp-content/uploads/2012/09/20120923_154314.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/09/20120923_154314.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";s:4:"3264";s:6:"height";s:4:"2448";s:14:"hwstring_small";s:23:"height='96' width='128'";s:4:"file";s:27:"2012/09/20120923_154314.jpg";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:4:"file";s:27:"20120923_154314-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:27:"20120923_154314-300x225.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"225";}s:5:"large";a:3:{s:4:"file";s:28:"20120923_154314-1024x768.jpg";s:5:"width";s:4:"1024";s:6:"height";s:3:"768";}}s:10:"image_meta";a:10:{s:8:"aperture";s:3:"2.6";s:6:"credit";s:0:"";s:6:"camera";s:8:"GT-I9300";s:7:"caption";s:0:"";s:17:"created_timestamp";s:10:"1348414994";s:9:"copyright";s:0:"";s:12:"focal_length";s:3:"3.7";s:3:"iso";s:3:"160";s:13:"shutter_speed";s:16:"0.03030303030303";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learn by teaching</title>
		<link>http://www.blog.cyberkinetx.com/?p=27</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[It might sound strange. But this is a great way to learn things in depth.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2010-12-14 22:25:31</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>method level scope in C#</title>
		<link>http://www.blog.cyberkinetx.com/?p=28</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[http://www.blackwasp.co.uk/CSharpVariableScopes.aspx]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2012-04-01 21:02:25</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ergonomics</title>
		<link>http://www.blog.cyberkinetx.com/?p=29</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=29</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2010-12-15 14:38:27</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>good practices</title>
		<link>http://www.blog.cyberkinetx.com/?p=31</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[LoginResult loginResult = UserBL.Login(user, pass);
return loginResult;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2010-12-17 18:35:07</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Art IV</title>
		<link>http://www.blog.cyberkinetx.com/?p=32</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[I had a dispute, the other day, with a friend of mine, a Java fan. I was advocating for the C#, trying to convince him that C# is not overwhelmed with unnecessary operators and keywords. From his point of view, C# is a language created with good intention but gone bad (as all microsoft products - that were his words).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2010-12-17 21:55:53</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Anatomy of a programmer error</title>
		<link>http://www.blog.cyberkinetx.com/?p=34</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[1. the problem
2. my fault
3. the code
4. the bug]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2010-12-18 08:13:13</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lonelty Dreams photo album</title>
		<link>http://www.blog.cyberkinetx.com/?p=43</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[<div style="text-align:left; width:450px"><object id="myWidget" type="application/x-shockwave-flash" data="http://www.blurb.com/assets/embed.swf?book_id=2022325&token_id=1546308&token=64ac4804824ce0be3c8dbc7691c0172c&token_id=1546308&token=64ac4804824ce0be3c8dbc7691c0172c" width="450" height="300"><param name="allowFullScreen" value="true"></param><param name="allowScriptAccess" value="always"></param><param name="movie" value="http://www.blurb.com/assets/embed.swf?book_id=2022325&token_id=1546308&token=64ac4804824ce0be3c8dbc7691c0172c&token_id=1546308&token=64ac4804824ce0be3c8dbc7691c0172c"></param><a target="_new" href="http://www.blurb.com/books/preview/2022325?ce=blurb_ew&utm_source=widget"><img src="http://bookshow.blurb.com/bookshow/cache/P2780361/md/wcover_2.png"></img></a></object><div style="display:block;"><a href="http://www.blurb.com/bookstore/invited/1546308/64ac4804824ce0be3c8dbc7691c0172c?ce=blurb_ew&utm_source=widget" target="_blank" style="margin:12px 3px;">Lonely Dreams by Radu Pascal</a> | <a href="http://www.blurb.com/landing_pages/bookshow?ce=blurb_ew&utm_source=widget" target="_blank" style="margin:12px 3px;">Make Your Own Book</a></div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2011-04-02 11:29:21</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>== versus Equals</title>
		<link>http://www.blog.cyberkinetx.com/?p=56</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2011-05-05 20:06:57</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_published</wp:meta_key>
			<wp:meta_value><![CDATA[new]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Beer sprint retrospective</title>
		<link>http://www.blog.cyberkinetx.com/?p=57</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[If you are familiar with Agil development using Scrum, you know there is a Sprint retrospective at the end of each Sprint. A time-boxed meeting where everybody is stating his point of view on what went good, what went bad and how to improve.

Because of a number of circumstances the sprint review was always held at the end of the day, in the remaining time till EOD. That was a problem since sometimes there wasn't any time, and everybody was getting stressed and anxious to get on with their own business. Consider that factor and as well the incapability of the human brain to focus on a single thing (in this context sprint retrospective), and instead of making a quick and very focused sprint retrospective where everybody could lay out their opinions it was more of a quarrel and nobody could finish without getting interrupted. So there was no way of keeping it short, the more stressed the people were the longer was the meeting. (I wander if the game theory can be applied for such problems).

It was a sunny day, about lunch time, when a colleague of mine had a genius idea, why not have the retrospective meeting out of office? The suggestion was gladly accepted by everyone. The next retrospective meeting was held out of office, in a nice place with good pizza and beer. Beer was the most important ingredient as it helped to open up everybody, and help to discuss without stress all the encountered problems, brainstorm for solutions, and just have a good time. I must say it was the most productive sprint retrospective ever. First of all nobody was anxious to leave because it's six o'clock. Second it was more like an open discussion with a lead speaker.

And one important thing, the scrum master buys the first round of drinks ;)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2011-05-15 08:02:33</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_published</wp:meta_key>
			<wp:meta_value><![CDATA[new]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to compare boxed value types</title>
		<link>http://www.blog.cyberkinetx.com/?p=70</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[I believe there are no .NET developers that aren't familiar with boxing, I mean boxing value types. If I am wrong here is a page from the c# programming guide: <a title="Boxing and Unboxing (C# Programming Guide)" href="http://msdn.microsoft.com/en-us/library/yz2be5wk.aspx" target="_blank">Boxing and Unboxing</a>.

The usual problem that comes up, when boxing is involved, is comparing the boxed values. A scenario (not typical but possible) would be when you want to check if an int value is contained in a list of objects:

[csharp]

[/csharp]

<a href="http://msdn.microsoft.com/en-us/library/ms173147(v=vs.80).aspx">http://msdn.microsoft.com/en-us/library/ms173147(v=vs.80).aspx</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date>2012-05-22 21:02:58</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.</title>
		<link>http://www.blog.cyberkinetx.com/?p=77</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2011-08-25 14:10:22</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.blog.cyberkinetx.com/?p=91</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I had a task with which I got very frustrated, and almost desperate. Firstly, I had to port some functionality from VB to C# and VB is a totally unfamiliar language to me. Second most of it was actually in Stored Procedures in Oracle that I had to invoke. And Oracle is like a hostile territory with a "Minefield" sign. So what I had to do was figure out what stored procedures where invoked from VB, then write a stored procedure that was invoking them with the right parameters (tough job when there are 50), and hope that I wired it by the right colors.

Of course nothing went by the plan. The initial list o SPs that I received wasn't the full one, as I discovered from looking into the VB code. Matching the parameters was pain in the.. Once my SP was ready it didn't do the job right. Me and my colleague spent 2 days just debugging and tuning the parameters. At times I was desperate. Just when we thought it should be working it would refuse very rudely.

3 ways developers halt in their tasks and how to kick start them:
<ul>
	<li>sometimes developers get desperate. For example when something isn't behaving as it is expected to. pair programming or another developer investigating into the same problem is very helpful more as a moral supporter.</li>
	<li>sometimes developers get blocked. when they are solving a problem, there is usually a base that they have build, an idea that they follow, and if it is a wrong one, they might get tangled in it and not see a way out. Having somebody just to talk about that usually helps.</li>
	<li>- they stumble on funcionality that they don't understand or have knowledge of. help them</li>
</ul>
A general idea for all developers when they get to a halt: stop. take a brake away from the computer, first talk to somebody about anything except your problem. Then talk about your problem with another developer. Get back to solving the problem but try to look at it from a different angle. Look at the problem in a wider context.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2011-09-17 19:30:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>deploy using power shell</title>
		<link>http://www.blog.cyberkinetx.com/?p=93</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[$source = 'source'
$dest = 'destination'
$exclude = @('a.txt')
Get-ChildItem $source -Recurse -Exclude $exclude | Copy-Item -Destination {Join-Path $dest $_.FullName.Substring($source.length)}]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date>2011-09-19 07:11:35</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Where do you get your kicks?</title>
		<link>http://www.blog.cyberkinetx.com/?p=100</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2011-10-26 18:33:53</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>WebSockets with SignalR (take 2)</title>
		<link>http://www.blog.cyberkinetx.com/?p=123</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=123</guid>
		<description></description>
		<content:encoded><![CDATA[Last week I posted an introductory post on SignalR. The focuse was getting started with it. I used the concept of Hubs from SignalR. Hubs get you started very fast but also have a downside - the messages are encapsulated in an envelope, like:
[js]
{&quot;hub&quot;:&quot;chatHub&quot;,&quot;method&quot;:&quot;Message&quot;,&quot;args&quot;:[&quot;my message&quot;],&quot;state&quot;:{},&quot;id&quot;:1}
[/js]

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>123</wp:post_id>
		<wp:post_date>2012-06-23 22:20:38</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Who should do the dirty job?</title>
		<link>http://www.blog.cyberkinetx.com/?p=125</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[Nobody wants to do the dirty job. Juniors complain about it, that they don't learn from it. Seniors complain about it, that their time is too precious to waste on junior tasks. So who should do it?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2012-07-07 08:48:34</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Wars, Technology and Culture</title>
		<link>http://www.blog.cyberkinetx.com/?p=128</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[Wars. Wars have always been around since humans learned to walk on two feet and handle a bat. Wars will still be around for a long time. Wars happen for various reasons, but I'll not enumerate any of them as I don't want to go into politics (because politics is a dirty business).

Technology. Technology for a modern human being might mean iPhones, laptops, space shuttles, but just as the very first bat that the humans learned to handle it's a product of our inventiveness. The rate of our technological advancement grew exponentially after the industrial revolution. It is still growing.

Culture. Meaning humanity in this context. Evolved at a very slow pace through the history. Had lots of downfalls, most recent big event happening in the late 30's and early 40's.

In the last century we excelled at 2 out of 3. Want to take a lucky guess at which? We managed to have 2 world wars (nothing like anything before in our history). We learned to fly, build nukes and send people into space. All in one century.

We didn't manage to advance in culture. We are at the same level we were about 100 years ago. 100 years means roughly 4 generations of people that should've aspired to higher goals for humanity. Instead what we have today is television that promotes violence, hatred and rebellion against culture. That's not a bright future for culture. Another downfall, may be even worse than the previous one.

But what does culture has in common with wars and technology you ask? The technology we have today is too advanced for our level of culture. We have the means to bring our planet into a nuclear winter, and a very low culture to avoid this (an american president and a russian state secretary almost pushed the red buttons back in 62).

The technology that is available to any person is high enough for building guided missiles to bring down plains, building drones to deliver explosive charges,]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2012-07-25 15:50:25</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test</title>
		<link>http://www.blog.cyberkinetx.com/?p=131</link>
		<pubDate>Sat, 21 Jul 2012 16:09:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[<img title="1342886970879.jpg" class="alignnone" alt="image" src="http://www.blog.cyberkinetx.com/wp-content/uploads/2012/07/wpid-1342886970879.jpg" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2012-07-21 18:09:57</wp:post_date>
		<wp:post_date_gmt>2012-07-21 16:09:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Going live</title>
		<link>http://www.blog.cyberkinetx.com/?p=141</link>
		<pubDate>Thu, 11 Oct 2012 18:32:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[Not many developers know how is it to go live with a project. And I'm not talking about one man shows or small websites. A one year, 10 people kind of project.
Now think bigger. A 2 year, 10 to 30 people (not including the people involved on the client's side), financial project. Lots and lots of business logic, processes, integration with existing processes. Teams dedicated to keeping different environments]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2012-10-11 20:32:28</wp:post_date>
		<wp:post_date_gmt>2012-10-11 18:32:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
	</item>
	<item>
		<title>async and await in a nutshell </title>
		<link>http://www.blog.cyberkinetx.com/?p=154</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[C# 5 came with a great new features commonly referred as async/await. If you haven't heard of it yet and haven't tried you should start by reading <a href="http://blogs.msdn.com/b/pfxteam/archive/2012/04/12/async-await-faq.aspx">this</a> and <a href="http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx">this</a>. Now that you are a bit familiar and think that it's all just Love and Kittens you'd probably rush in to make your new code all shiny with async/await, or start refactoring the old one. Stop. There are probably quite a few details you missed by reading those posts, at least I did for sure.

Let's dissect a few examples and see if your understanding is correct:

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2013-04-07 11:53:16</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello world!</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/10/hello-world/</link>
		<pubDate>Wed, 10 Nov 2010 09:23:22 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=1</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Welcome to WordPress. This is your first post. Edit or delete it, then start blogging!</blockquote>
I thought about deleting this post but the question "why"? came up. After all this is the first post on this blog.

So to summarize what this blog is all about, coding, electronics, stuff.. yeah, you get me. About the styling, I was thinking to keep it stupid simple, so I will stop on first simple and elegant theme that i find.

best regards, till new posts.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2010-11-10 09:23:22</wp:post_date>
		<wp:post_date_gmt>2010-11-10 09:23:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code formatting in WordPress</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/10/4/</link>
		<pubDate>Wed, 10 Nov 2010 09:40:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[My first concern when i was getting this blog up, was to set up a code formatting plugin. I had another install of  WordPress and there was no default plugin for that. So after typing some keywords in the plugin search came up with the <a href="http://wordpress.org/extend/plugins/syntax-highlighter/">Syntax Highlighter for WordPress</a> which actually uses the <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter </a>. Searching around i found that Scott Hansleman uses the same plugin, so i decide to settled down with it.

code sample from Scott Hanselman's <a href="http://www.hanselman.com/blog/BestCodeSyntaxHighlighterForSnippetsInYourBlog.aspx">blog</a>:

[csharp]
// Hello3.cs
using System;

public class Hello3
{
   public static void Main(string[] args)
   {
      Console.WriteLine("Hello, World!");
      Console.WriteLine("You entered the following {0} command line arguments:",
         args.Length );
      for (int i=0; i < args.Length; i++)
      {
         Console.WriteLine("{0}", args[i]); 
      }
   }
}
[/csharp]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2010-11-10 09:40:12</wp:post_date>
		<wp:post_date_gmt>2010-11-10 09:40:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hall of Fame</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/10/hall-of-fame/</link>
		<pubDate>Wed, 10 Nov 2010 13:09:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[This is the first article from a series (at least I hope so) of articles dedicated to bad coding. 
Currently, at my day-job we are refactoring a WPF project to MVVM. Important to inform you that project was not developed in our company! There are a lot of "weird stuff" going on in the code. I'll try to cover a few things that look funny or really weird.

Here is the C# 3.5 snippet. Consider value as IEnumerable.
[csharp]
// Set the contact person's value(s) if allowed.
if (value.ToList() == ContactRole.AvailableContacts) return;
[/csharp]
The intention is clear, the guy wanted to compare 2 lists but.. failed.

More to come.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2010-11-10 15:09:18</wp:post_date>
		<wp:post_date_gmt>2010-11-10 13:09:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hall-of-fame</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bad-code"><![CDATA[bad code]]></category>
		<category domain="post_tag" nicename="fail"><![CDATA[fail]]></category>
		<category domain="category" nicename="hall-of-fame"><![CDATA[Hall of Fame]]></category>
		<category domain="post_tag" nicename="hall-of-fame-2"><![CDATA[hall of fame]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; Bad organization Cyber KinetX]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.blog.cyberkinetx.com/2010/11/12/bad-organization/</wp:comment_author_url>
			<wp:comment_author_IP>173.236.177.4</wp:comment_author_IP>
			<wp:comment_date>2010-11-12 12:59:20</wp:comment_date>
			<wp:comment_date_gmt>2010-11-12 10:59:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] make the world spinning Blog         &laquo; Hall of Fame [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Bad organization</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/12/bad-organization/</link>
		<pubDate>Fri, 12 Nov 2010 10:59:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[This is another post from the Hall of Fame. It took us 2 hours to figure out why almost simultaneously on 2 computers the visual studio started to give compilation errors of the type:

[csharp]
Error	6	The type or namespace name 'Windows' does not exist in the namespace 'BaseNamespace.System' (are you missing an assembly reference?)	D:\SomeBaseDirectory\SomeCodeFile.cs	40	51	BaseNamespace
[/csharp]


I do admit, it was also our mistake in a way..
So the project I was talking about in the <a href="http://www.blog.cyberkinetx.com/2010/11/10/hall-of-fame/">previous post</a> has a System folder in the UI project. We had to add some classes and we figured it was the best place according to the existing organization of the project. There were all kind of utils and managers in that folder already. After adding the new classes and doing some dev, when we tried to compile (first my colleague) there were a few thousand compilation errors with  'Windows' namespace. My colleague tried to restart the computer as it was more like a Visual Studio problem. But.. no luck. Next it happened to me, it was really weird, i tried the same restart, again with no luck.
It took some patience to read carefully the exception, and some sherlock deduction to figure out that the classes we added have the namespace with System in it and that VS is looking for the Windows inside our namespace.
Looking over how the other guys (the ones that originally wrote the project) handled the problem I got frustrated. They just stripped down the namespace from their classes.
So here is a word of advice:
<blockquote>kids, don't use System folders in your solution, or the All Mighty Gods of Computers will punish you by giving thousands of compilation errors.</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2010-11-12 12:59:16</wp:post_date>
		<wp:post_date_gmt>2010-11-12 10:59:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bad-organization</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bad-code"><![CDATA[bad code]]></category>
		<category domain="post_tag" nicename="fail"><![CDATA[fail]]></category>
		<category domain="category" nicename="hall-of-fame"><![CDATA[Hall of Fame]]></category>
		<category domain="post_tag" nicename="hall-of-fame-2"><![CDATA[hall of fame]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>VGA vs HDMI</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/13/vga-vs-hdmi/</link>
		<pubDate>Sat, 13 Nov 2010 10:43:31 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[About 3 months ago I got myself a brand new PC with a 24" Full HD monitor. The 1920x1080 pixels are awesome. Watching Full HD movies and playing games in Full HD rocks.
The monitor came with a VGA cable but also has a HDMI input. I was thinking about buying a HDMI cable but decided to save 10bucks and left it running on VGA. 
One thing tho was making me angry, it would flicker in games. No matter what game or settings. I thought it's something with my configuration and barred with it. But recently I saw some computers in our office with Full HD monitors flickering in some cases, also with a VGA cable. So I went to the store and got that white HDMI cable (my monitor is white), plugged the monitor, started Star Craft II and.. No More Flicker!
I did try to google for a reason but got no logic answer so I just accepted the fact that HDMI is worth it. My best guess is VGA can't deliver the huge amount of data to the monitor so it skips frames and so the flickering is produced.
Get yourself a HDMI cable today (or at least a DVI)!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2010-11-13 12:43:31</wp:post_date>
		<wp:post_date_gmt>2010-11-13 10:43:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vga-vs-hdmi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="flicker"><![CDATA[Flicker]]></category>
		<category domain="post_tag" nicename="hdmi"><![CDATA[HDMI]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="vga"><![CDATA[VGA]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[AlexanderMP]]></wp:comment_author>
			<wp:comment_author_email>admin@alexandermp.com</wp:comment_author_email>
			<wp:comment_author_url>http://AlexanderMP.com</wp:comment_author_url>
			<wp:comment_author_IP>89.28.50.132</wp:comment_author_IP>
			<wp:comment_date>2010-11-13 13:46:03</wp:comment_date>
			<wp:comment_date_gmt>2010-11-13 11:46:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wow, took you long to discover :)
The flickering starts to become visible at monitors of at least 19" (1440x900), but it's clearly visible on 1680x1050.
For the time, the solution was DVI. No flickering, clear image.
On VGA, you could do weird stuff with the image, and the monitors came with the "Auto" regulator, which made the pixels in the received image go right into the pixels of the matrix (with a certain error of course). I don't know for sure how it works, but DVI, I think, sends the data about each pixel from the matrix, so no more regulation is needed, and you can't manipulate the image (size, shape, position) any more.
With DVI, the image became crisp clear, no more fuzzy pixels, no more rainbow effect, and what's more important - no flickering.

I still don't get what HDMI gives.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.97.210.14</wp:comment_author_IP>
			<wp:comment_date>2010-11-13 15:38:41</wp:comment_date>
			<wp:comment_date_gmt>2010-11-13 13:38:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, I am ashamed. At first I blamed my integrated video card. But when I got myself a gts450 I started suspecting that the VGA is the reason.
I don't know the difference between the DVI and HDMI, I guess google can have an answer but my monitor does not have DVI so I don't bother with it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Nick Pal]]></wp:comment_author>
			<wp:comment_author_email>paladenick@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.232.174.203</wp:comment_author_IP>
			<wp:comment_date>2010-12-14 12:29:19</wp:comment_date>
			<wp:comment_date_gmt>2010-12-14 10:29:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Flickering i'm not sure what do you mean exactly, but if you'r speaking about the slight color/intensity noise that is noticeable in areas with the same color - then the explanation is very simple - VGA is analog which implies loses of information on the line and in the process of digitalizing. DVI and HDMI are digital so they are lossless.

That's the whole magic :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Code art part I</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/17/code-art-part-i/</link>
		<pubDate>Wed, 17 Nov 2010 12:58:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[I do see a lot of source codes, both in the projects at the job and sources I download for "inspiration". Some ugly, some nice.. but mostly ugly. 
Just like in art there is no general rule for what is ugly and what is beautiful. It's all in our heads, some may consider p_privateField as a rule, while others as the ugliest thing in the world. Also there is the society, that imposes rules of conduct that it expects others to follow, and as a rule there are the "rejects" that decide to follow no rules.
I do try to follow some rules for formatting and arranging the code, some I consider beautiful and some helpful. There are rules that help other developers better understand the code written by others, it's like music genres, if you like rock you can understand rock, but classic will sound weird. There are also rules that help avoid bugs.
After all that said let's get to some practical stuff.

<strong>Spaces vs Tabs</strong>
When indenting the code you can use spaces or tabs. Some recommend spaces while others using Tabs.
There is no general rule for that. As for me, I see not a single reason for using spaces for indentation. There is a cons, it takes longer to delete the lines of code.
Tabs are more easy to manage. It's easier to indent the code just by hitting a few times the tabs button. You can set the tab size whatever you like in your environment and no other developer will complain that you insert only one space for indenting. And it's faster to delete a lines of indented code.

<strong>Line size</strong>
Yes, yes, yes, most of us have HD monitors this days ( I am still waiting they will give me one at the job, yes I am a dreamer ), but you have to respect your colleagues with 1280x1024 monitors. Also consider the colleagues with laptops, horizontal scrolling is not that comfortable (after microsoft inserted a bug in the VS2010 and it does not accept horizontal scroll from my mouse).
Back in the days 80 was a rule. Later it was 100. Now it's falling into chaos.
I did read on a blog that since the HD monitors are becoming more widely used we should use longer lines and even more expressions per line, but hey, why would you want to do that??
It is still good practice to keep it to 100 chars. Small lines are always easier to comprehend. Just as an example, do you prefer big books with long lines or small books? Even newspapers make the lines narrow for easier reading.
In case you consider 100 outdated, a good way to guide is to see the smallest monitors in the team and keep the line sizes within the working area. 
As an updated, a friend of mine pointed out a very good reason to keep the lines short. You can have 2 parallel windows with code simultaneously on a HD monitor. Useful when comparing bits of code, merging, or doing a similar implementation from another file.

I'll keep this post short (for the first one in the series) and end it here. Comments are welcomed.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2010-11-17 14:58:23</wp:post_date>
		<wp:post_date_gmt>2010-11-17 12:58:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-art-part-i</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-art"><![CDATA[Code Art]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Art part II</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/19/code-art-part-ii/</link>
		<pubDate>Fri, 19 Nov 2010 09:46:55 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=18</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Curly braces</strong>
Curly braces are an important part of our <del datetime="2010-11-19T06:52:40+00:00">life</del> code. Although some languages managed to avoid the usage of brackets, I am a fan. You can have too few curly braces, but never too many.
Adding the opening curly brace on the same line as the condition or on the next one is usually dictate by some code convention specific to the language you work with. For example Java likes to open the brace on the same line as a condition, C# on the next line. Java guys might argue that C# is wasting precious lines on your monitor, C# guys that Java makes the code less eye-friendly.
So who likes curly braces? <em>for</em>, <em>do</em>, <em>while</em>, <em>foreach</em> (C#), <em>switch</em>, all love it.
The rule of thumb would be to encapsulate all the statements in curly braces, no matter if your <em>if</em> or <em>loop</em> has just one statement.
[csharp]
if (clients &gt; 10)
{
    pages = clients / 10;
}

//versus:

if (clients &gt; 10)
    pages = clients / 10;
[/csharp]
Besides the visual part it can also avoid some bugs, like when you want to add a new statement and you put the cursor after the ";", hit enter and type fast the new statement, forgetting to add the braces. Don't smile, it does happen!
Same with loops. Even if you have one statement encapsulate it into curly braces.
[csharp]
for (int i = 0; i &lt; clientListBox.Items.Count; i++)
{
    clientListBox.Items[i].Visible = true;
}
[/csharp]
The single exception I agree with is when you have a simple condition and need to set a property (one short line):
[csharp]
if (clients &gt; 10) clientsPanel.PagingEnabled = true;
[/csharp]
There is one more way to use the braces, to separate the scope of a variable:
[csharp]
public void ShowClientPage(int pageNumber)
{
    //here is the code for the left column
    {
        int items = 0;
        //some processing goes here
        leftColumn.Height = items * ITEM_HEIGHT_CONSTANT;
    }

    //here is the code for the right column
    {
        int items = 0;
        //some processin goes here
        RightColumn.Height = items * ITEM_HEIGHT_CONSTANT;
    }
}
[/csharp]
In this example <em>items</em> is used both for the right and left columns calculations, and is separated into 2 scopes. There is no reason for doing that in this example, it is just for explaining the idea. And the idea is, it's bad practice. If you are thinking about writing that, you most probably have to extract the code into two methods.

<strong>Line spacing</strong>
One more important aspect is the spacing between your lines of code. It helps a lot when the code is separated into small logical blocks, and most of the time a look at the first line of this blocks is enough to give you an idea what this block is and if it is the one you're looking for.
[csharp]
public void Foo()
{
    int visibleElementsCount = 0;
    int selectedIndex = 0;
    foreach (Element element in Elements)
    {
        if (element.Age &gt; 0) visibleElementCount++;
        if (element.IsDefault) selectedIndex 
    }
    contractsListBox.SelectedIndex = selectedIndex;
}
[/csharp]
Now that is kind of heavy to comprehend with one look. Compare it to:
[csharp]
public void Foo()
{
    int visibleElementsCount = 0;
    int selectedIndex = 0;

    foreach (Element element in Elements)
    {
        if (element.Age &gt; 0) visibleElementCount++;
        if (element.IsDefault) selectedIndex 
    }

    contractsListBox.SelectedIndex = selectedIndex;
}
[/csharp]
I hope you got my point. Till next post ;)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>18</wp:post_id>
		<wp:post_date>2010-11-19 11:46:55</wp:post_date>
		<wp:post_date_gmt>2010-11-19 09:46:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-art-part-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-art"><![CDATA[Code Art]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fw: Will the really real programmers please stand up!</title>
		<link>http://www.blog.cyberkinetx.com/2010/12/03/fw-will-the-really-real-programmers-please-stand-up/</link>
		<pubDate>Fri, 03 Dec 2010 07:46:45 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[I was reading the CodeProject newsletter the other day, and this article caught my attention: <a href="http://stevenbenner.com/2010/08/will-the-really-real-programmers-please-stand-up/">Will the really real programmers please stand up!</a> The article speaks about the "real" programmers and how do you recognize one. (I do hope to come up one day with my own definition of a good programmer versus bad programmer)
It follows a series of other good articles about developers, good developers and hiring developers. Just one more article that caught my attention: <a href="http://blog.mathgladiator.com/2010/11/3-programming-languages-you-need-to.html">Programming languages you need to know</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2010-12-03 09:46:45</wp:post_date>
		<wp:post_date_gmt>2010-12-03 07:46:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fw-will-the-really-real-programmers-please-stand-up</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>?? operator in C#</title>
		<link>http://www.blog.cyberkinetx.com/2010/12/14/operator-in-c/</link>
		<pubDate>Tue, 14 Dec 2010 09:51:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[Everybody knows the ternary operator <strong>?</strong>. It can be found in most languages like C/C++, Java, C#, PHP and JS. But how many C# developers know about the binary operator <strong>??</strong> ? Apparently not so many.
<strong>??</strong> is a great little thing introduced along with null-able types in .NET 2.0. It's meant to eliminate some ifs in your code when working with types that can be null. Unfortunately it is not so widely used.
Let's check an example:
[csharp]
int GetTeamPoints(User user)
{
    int? teamPoints;

    using (DBDataContext db = new DBDataContext())
    {
        teamPoints = db.Users.Where(x =&gt; x.Team == user.Team)
            .Sum(x =&gt; x.Points);
    }

    if (teamPoints == null)
        teamPoints = 0;

    return teamPoints.Value;
}
[/csharp]
The code works ok, but how about the next example:
[csharp]
int GetTeamPoints(User user)
{
    int? teamPoints;

    using (DBDataContext db = new DBDataContext())
    {
        teamPoints = db.Users.Where(x =&gt; x.Team == user.Team)
            .Sum(x =&gt; x.Points);
    }

    return teamPoints ?? 0;
}
[/csharp]
Ah, now it looks so much cleaner. And it's faster by a few processor cycles.
Although <strong>??</strong> has been introduced especially for working with nullable types, it can work with reference types as well, returning a value when the object is null.

You may want to check the MSDN reference: <a href="http://msdn.microsoft.com/en-us/library/ms173224(v=VS.100).aspx">?? Operator (C# Reference)</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2010-12-14 11:51:24</wp:post_date>
		<wp:post_date_gmt>2010-12-14 09:51:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>operator-in-c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[AlexanderMP]]></wp:comment_author>
			<wp:comment_author_email>admin@alexandermp.com</wp:comment_author_email>
			<wp:comment_author_url>http://alexandermp.com</wp:comment_author_url>
			<wp:comment_author_IP>212.0.218.231</wp:comment_author_IP>
			<wp:comment_date>2010-12-14 12:38:56</wp:comment_date>
			<wp:comment_date_gmt>2010-12-14 10:38:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice, this is a replacement for .GetValueOrDefault(0)

Will know :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>FW: The surprising truth about what motivates us</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/24/fw-the-surprising-truth-about-what-motivates-us/</link>
		<pubDate>Wed, 24 Nov 2010 10:30:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[This is not an actual post, more something I've seen today and is so inspiring that I want to share it with the world: <a href="http://www.youtube.com/watch?v=u6XAPnuFjJc">http://www.youtube.com/watch?v=u6XAPnuFjJc</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2010-11-24 12:30:25</wp:post_date>
		<wp:post_date_gmt>2010-11-24 10:30:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fw-the-surprising-truth-about-what-motivates-us</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Art part III</title>
		<link>http://www.blog.cyberkinetx.com/2010/11/24/code-art-part-iii/</link>
		<pubDate>Wed, 24 Nov 2010 21:20:13 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Naming convention</strong>
This point covers Naming Convention for C# only. If your native language is some other, you'll have to search on other blogs.. I'm not very familiar with Java, and it's been a while since I worked with PHP, and I hate the C/C++ Naming Convention. Sorry.
This is one of the most controversial points that I'll be covering in the Code Art series. Most of what I'll be suggesting represents my personal opinion, of course I'll try to motivate it. One of the things I hate in Code Convention documents is that the decisions to use one case or another (for ex.) are not motivated by practical use.
So here I go.
When choosing the letters case, the simple rule of thumb would be to use PascalCase for all names except constants, private fields and variables. Constants are usualy typed using all letters upper case and underscore to separate the words: <em>I_AM_CONSTANT</em>. For private fields and variables use lower case camelCase. 
In case your private field name should start with some shortcut likce ICBM, make all letters lower case: <em>icbmMissile</em>. Don't do that if you use PascalCase: <em>ICBMMissile</em>.

Prefixes
There are a lot of documents suggesting adding <em>m_ </em>prefix to private fields, for ex: <em>m_variableName</em>. I can't see any reason for doing it. Mistaking a local variable with a private field is kind of hard.. So give up on prefixes to separate the local variables from the "rest of the world", just be a better programmer.
Never add <em>C</em> prefix to classes. This is so last week.. 
The only prefix that you should use is <em>I</em> for interfaces. There is a recommendation to avoid using <em>I</em> as the first letter of any other class but if you need an I why rename your class to something that does not represent it?

Suffixes
Never add sufixes to variables that describe the type, like <em>managersInt</em>. The original idea was to make it simpler to developer, to not search for the declaration in order to figure out what type is it. But you have the most modern IDE in front of your eyes. Move the cursor other the variable name and you get a balloon with all the information you need (it's a kind of magic).
The most common suffixes are Exception and Delegate. But read forward.

Suggestive names
All the names you give to your classes, interfaces, variables, methods should be as clear as possible and should describe <strong>what is it</strong>(or what it does).
For example <em>MessageDispatcherManager</em> class - most probably gets message from somewhere and sends it to the right receivers. <em>GetAllMethods </em>method - probably gets all the messages that are waiting on the queue (what it does). <em>allMessagesList</em> private field - here you may argue that I used List as suffix. Yes and no. List is part of the description because this is what it is, a list of something. I can have also a <em>allMessagesCount </em>field - I did not use int as suffix. I described what is it.
It's a common convention to end all exceptions with Exception and delegates with Delegate.
On events it is usual to name them in present or past tense, if the event is fired after an action is performed or before. For ex. <em>Showing</em> - most probably is fired just before a control is rendered (don't take my word that there is such an event). And <em>Showed </em>would like to notify you that the action of showing has just been finished. Also it is usual to name the method that will do the firing of the event with the prefix <em>On</em>: <em>OnShowed</em>, <em>OnShowing</em>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2010-11-24 23:20:13</wp:post_date>
		<wp:post_date_gmt>2010-11-24 21:20:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-art-part-iii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Path</title>
		<link>http://www.blog.cyberkinetx.com/2010/12/12/the-path/</link>
		<pubDate>Sun, 12 Dec 2010 19:17:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[There are a lot of articles on the net about how to be a better programmer, but this post is about how I see the path towards becoming better in our daily activity: programming.
I'll start this post by publicly declaring that I don't consider myself a good programmer. I know that there is a lot I don't know. There are areas where I am not as good as I wish I was. And sometimes I do feel sad that I am not a great programmer. But then again, there is this article about self esteem <a href="http://blog.asmartbear.com/self-doubt-fraud.html">Why I feel like a fraud</a>.
Saying that, I really don't know why I got promoted to Senior. Am I better than average developers? Or was I worse than average, and now I am average? I don't know, I will just try to focus on improving myself, and if my superiors consider me good enough for another promotion, great.
The way I see it, there is no way you can become a great programmer in a year or two. Hardly in three years. No matter how many books you may read you need experience, and that comes with time. 
Experience is all the stuff you accumulated in your head, solutions to common or less common problems. How to deal with certain stuff. So when your next task comes, you may solve part of it using knowledge gained from your experience.
On the other hand practice is all the stuff you do, all the ifs you write that become in the end an automatism that you don't even have to think how to write them. You don't have to think to end a line with <em>;</em>, it comes naturally. Also by practice you gain experience. The more you practice the more actions become automatisms and the more experienced you become.
Only by programming at your day job is not going to make you good at it. Only by going to college to learn programming is not going to prepare you for your future career of software developer. What is required is devotion. If you are not devoted drop it, go learn law.
Your path should start when you're in high school, writing some small apps just for fun, then comes college, you have to have ambition to make apps and try release them on the world wild web (you'll have to fight with the frustration), be part of open source if you like it. College is when you have to come in contact with professionally written code, to learn about how code should be actually written.
Unfortunately a lot of starting programmer get thrown into programming life unprepared. They get into a company as juniors, and only then discover how software is actually done.. in best case.
Being surrounded by a lot of geek folks, that have the experience is a marvelous thing. You can learn "the stuff". You're a junior and don't know how exception handling should be done correctly? They will give you a crash course on that. How to organize files in big projects? You can learn by studying the solution organization. Have little experience with N Layer architectures? As a student it seems like a logical and great thing to do, but only out in the real world are visible the problems that come with it. Also this are the guys you can brain storm when you need a solution to a problem and have some hard time to find it. And here comes a little advice: don't be afraid to ask advices, it can save you so much time!
Over time you gain knowledge (experience) that you can pass on, and that is a nice feeling when you can help others.
Ok, but I was saying that day job programming is not enough for being good. I showed the path as far as I know it. But on this path there is also the continuous practice at work and home. Spending nights trying to finish your next "killer app", thrilled by some new technology you discovered recently. You don't get to use a wide range of technologies at the job, so playing home with all the "goodies" is a must. You like mobile development but at the job you do only ASP.NET? No one is stopping you from writing an app for Android or iPhone. Play with it, may be in a year there will be a project in your company and you could jump in. You never know. That what experience is all about. The more experience you have the more options you have.
To read a lot of articles an how-to on the net is natural. But how about books? How many books did you read in the last year?
If you think you can learn WPF or ASP.NET without reading a good book, stop. Not even having around you ten colleagues that are experts in that technologies. Yes, you will learn the basics, some tricks. But at every step you'll have to ask for help, or even worse, make mistakes because you thought you know how to do something.
Before starting a new technology take a book. Read it from start to end. Do Some examples along the way. After half a year or a year, when you think you know the technology, read the book again from start to end. You will find things that you missed the first time or forgot about. And don't forget to check "what's new" in the new versions of the technologies you work with. All that will help you master the technologies. It's par of the practice process.
And let's not forget about the technologies we dislike but we have to work with at the job, or when the project enters the stabilization stage before final release. It's a tedious process, but you have to do it. You have to prove that you are good at it too. A good programmer must be able to do a software product from the start till the end.
One more thing I consider very important is the company you are working in. Let's say the company hires a junior developer. In a year he gains enough experience to be promoted to developer. This is the fastest evolution. And I say evolution because the programmer learns the process of doing real world software. But to grow further that is not enough. Many programmer are self motivated to learn, many are not. Along with the promotion there is usually a raise in the salary. The companies suppose that this is the motivative factor for the programmers to get better and better. But this is so not true.. Think for yourself, the last time you got a salary raise, how much time you were thrilled and were saying to you that you have to work even harder to be promoted next year too? A month after the raise? Two months? And what was after that? Again frustration that you are given to do stuff that is boring (ok, may be you have a different thought but the essence is the same).
Encouraging the employees to take certifications is a good start I think.
I posted a link to <a href="http://www.youtube.com/watch?v=u6XAPnuFjJc">The surprising truth about what motivates us</a> in a previous post. After watching it I stood and tried to figure out what a software company could do to motivate a programmer, and so far I haven't come up with a good answer. Here is one idea that came up: how about suggesting to the teams to come up with an idea that they like, a project just for fun, and work on that one outside working hours (whenever they fill like it), but with support from the company - may be some hosting, helping with organization, logistics if necessary, small stuff that does not require a lot of involvement. If your company owns a 10 store building may be build a giant tetris game? It's old but still geeky.
One demotivational factor is working overtime. No matter if it's payed or not.
I end here this article, as my inspiration for today has been exhausted. I hope to see some comments from you on ways to become better, share them with the world!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2010-12-12 21:17:26</wp:post_date>
		<wp:post_date_gmt>2010-12-12 19:17:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-path</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Paranoia</title>
		<link>http://www.blog.cyberkinetx.com/2011/01/13/paranoia/</link>
		<pubDate>Thu, 13 Jan 2011 20:04:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>I dedicate this post to all the paranoid guys out there that believe in some theory of conspiration, that the government taps their phones and satellites track their moves. As one wise man said “paranoia is your friend”.</blockquote>
In such a technologically advanced age I sometimes stop and think about the price at which all this comes, and how bad people can use this technological advantage in their advantage. The more we computerize and centralize everything the more exposed we get to the threats of cyber attacks.<!--more-->  
 
Now and then you hear that some big site’s db has leaked out, with all it’s thousands of users and passwords. Those who get the db can further use it in malicious ways, like try the emails and passwords against paypal, some percent will match, and do some buying on ebay? Ok, ok, paypal and ebay have some mechanisms of protection against that, but then again.. I got my ebay account blocked once, as I am using many computers, and for reactivating it I had to pass some validations, like what was your school or something, and I usually just write something in. No standard way of validation worked for me so I started fooling around with ebay profile pages till I managed to bypass(no hacking) the security, change the profile data, and validate with changed info, so much for protection I say..

But back to db leacks. What are the chances that the next leak will be the facebook db? I say pretty high. I don’t believe you have a different password on every account that you possess out there. If one db has leaked, they may have access to more than one account.

I do remember, early in the days, guys would just build some lousy site with some lousy info, that required you to register, and then used those password to check against some services they were interested in.

I don’t have a good solution to that problem. If you work with only one computer at all times, there are applications that can manager all your passwords, so you can have one site – one password. And for the unlucky ones that work with 3-4 computers daily, be sure to have separate passwords for sites that involve credit card information.

So I recommended using a password manager, but how can you be sure this password manager software is not some CIA stuff that also makes sure the agency has your password in case they need it? Besides configuring your firewall to deny access to this software, you can’t.

Once upon a time, in some lost blog of mine, I wrote a post about google, the potential threat that it poses to all the online-bounded humankind. 

90% chance you have a google account for email. You may have a credit card associated for google check out (works mainly for USA only), some docs and excels with google docs, photos on picasa. Are you using gtalk? All that is just the tip of the iceberg. Google is tracking statistics for an awful big number of websites, and providing ads for like half the internet. Try naming one not so big website that doesn’t have google ads on it?

So what is the threat. First threat is google. It has access to your emails, your money, your conversations, documents, people in your photos (let’s not forget about face recognition), it knows what sites you visit so it can figure out your interests and provide targeted ads (you may think of it as a good idea, but it really is stuff you don’t actually need, just like, and is a total waste of money). It can have all your mobile contacts if you own an Android powered phone. It’s too much information that is accessible by one company. And don’t get me wrong here, I don’t hate google, I do have an account and an Android phone, but the hypothetical case when it can go “evil”, frightens me.

Second threat that google poses is someone breaking in and getting all that information that is concentrated in their huge data centers. That might end up catastrophically.

I mentioned targeted ads. It is arguably a useful thing. Getting ads that reflect your interests. Wouldn’t that be great? Wouldn’t it be great to spend money on things you don’t quite need? I guess..

After all.. when you go shopping, do you buy what you really want/need or something that has crept into your subconscious by means of tv/radio/internet ads? When you go voting, is it really the right person, or was your opinion influenced by persons that know how to program your brain to act in their best interests? If you do have the time, read about NLP – Neuro Linguistic Programming. 

Till now I spoke about vulnerabilities at some third party. But how secure are you? Can you be sure nobody monitors your conversations? If you are in USA, all your communications might be monitored, without even a warrant. God bless the non-USA residents as they still have some rights.

A few years ago I spotted a vulnerability in the way an ISP provider was installing modems to its clients, by not setting any passwords on them, leaving the admin interface open to the world wild web. What’s the worst thing might happen, you say? It took me a few days to write a DNS server that could give my own IP to any DNS request, with that done a simple change in the admin interface of the target and I could proxy all the traffic. It’s time to check if your router has a password on it.

The internet poses a lot of threats. Don’t wander if you are secure, because you aren’t. If you don’t have any valuable information don’t get stressed. If you have, you might start reading all the security docs in the world, and it would still be too little to protect yourself. Sometimes there is just nothing you can do about it.

If you’re a paranoiac you shouldn’t use computers at all. Best place to live is in the woods where the satellites can’t spot you and where are no cameras at each corner, where you don’t have to own an ID card to be somebody.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2011-01-13 22:04:25</wp:post_date>
		<wp:post_date_gmt>2011-01-13 20:04:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>paranoia</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[flashSpec]]></wp:comment_author>
			<wp:comment_author_email>volodyaputin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>92.115.144.125</wp:comment_author_IP>
			<wp:comment_date>2011-01-16 17:10:24</wp:comment_date>
			<wp:comment_date_gmt>2011-01-16 15:10:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Now it's a kinda natural thing to me to set a username/pass depending on the level of threat that might be on info misusage.  
 Yesterday my gf installed a (cracked) prog on my home pc. On setup, she put my name in the "name" field, and I corrected her, by typing in garbage, then in the "organisation" field shi typed "home", and again I corrected her. On her question "Why so much fuss about it", I told her that any software might send info to a db, which would show my IP, name, definetly some other info, and that this IP and Name "LIVES" here ("organisation = home").
 Today, as I was taking a walk, I thought about a device that would consist of a usb-flash memory stick with a "physically destroy memory chip" button, named something like "Start", "Push Me", of course, it would have a "hold" (safety catch) mechanism that would prevent unwanted pressing.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>49</wp:comment_id>
			<wp:comment_author><![CDATA[flashSpec]]></wp:comment_author>
			<wp:comment_author_email>volodyaputin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>92.115.144.125</wp:comment_author_IP>
			<wp:comment_date>2011-01-16 17:38:23</wp:comment_date>
			<wp:comment_date_gmt>2011-01-16 15:38:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The most interesting thing is that I don't get stressed about this at all, it just comes to me: when it is about some potential threat, I just define the appropriate rules, depending on the level of threat. This applies not just to hi-tech devices, but also to other things, for example when speaking to someone, I (try to) provide as much info as I need to get what I want, and doing this in a calm way, making sure that this person does not need any more info, and not that I do not want to give it to him/her. In this case it's also about potential threat to you and people you care about, and about the level of trust to the person.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>AutoMapper</title>
		<link>http://www.blog.cyberkinetx.com/2011/02/06/automapper/</link>
		<pubDate>Sun, 06 Feb 2011 13:46:36 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[It’s been a long time since I haven’t posted anything technical, but here is the weekend, and I finally have time to write another article on my laptop. I started writing about AutoMapper 2 months ago, but figured the PoC I was going to demo was faulty so I gave up. Till now. I think I got it right this time, and I hurry to share with you my latest thoughts.

I’ll go with a short description of the tool, just to give you a heads up what AutoMapper is all about. Suppose you are working in an n-layered solution where you have Model entities and DTO entities (Data Transfer Object). The Model entities are the classes that are loaded from the DB, and used in the Business Logic Layer. The DTO entities are used for communication with the outside world, say web service contracts. Naturaly you’ll be writing mapping code for creating DTO objects from Model objects, and Model from DTO. Supposedly a lot of the DTO entities have the same fields as Model entities, with some exceptions. You can use AutoMapper to map the data between the Model and DTO entities in just a few lines compared to manual mapping:
[csharp]
    public class Model
    {
      public string Name { get; set; }
      public string Surname { get; set; }
      public int Age { get; set; }
    }

    public class DTO
    {
      public string Name { get; set; }
      public string Surname { get; set; }
    }

..

    //create the source object:
    Model model = new Model
    {
      Name = &quot;John&quot;,
      Surname = &quot;Black&quot;,
      Age = 35
    };

    //manual mapping:
    DTO dto = new DTO
    {
      Name = model.Name,
      Surname = model.Surname
    };

    //mapping using AutoMapper:
    //this two lines can be set up in a static constructor, 
    //or in an Init block
    Mapper.CreateMap&lt;Model, DTO&gt;();
    Mapper.AssertConfigurationIsValid();

    //mapping from Model object to DTO
    DTO dto = Mapper.Map&lt;Model, DTO&gt;(model);

[/csharp]
You can read about basic usage in more details in this <a href="http://jasona.wordpress.com/2010/02/05/getting-started-with-automapper/">blog </a>

Why this is good? Because you won’t have to worry about adding mappings manually each time you add new fields. We are all humans, we sometimes forget that we must also update some mapping class in some forgotten project.

But there is still chance for mistakes. If you create the target field but forget to create the source field, you will end with default value for that target field.

Don’t worry, with a correct usage of AutoMapper you can create 2 way mappings that can be verified easily with unit tests, or at least spotted immediately when you run the application on your dev machine.

Now using the previous Model and DTO classes let’s do a two way mapping and validate it with AssertConfigurationIsValid():
[csharp]
    //mapping using AutoMapper:
    Mapper.CreateMap&lt;Model, DTO&gt;();
    Mapper.CreateMap&lt;DTO, Model&gt;();
    Mapper.AssertConfigurationIsValid();

...

    Model model = Mapper.Map&lt;DTO, Model&gt;(dto);

[/csharp]
An exception will be thrown when validating the configuration. When mapping from DTO to Model, there is the Age property that AutoMapper does not know where to map from. Ups.. Is this a mistake? Did I forget to add the Age field to the DTO class? If it’s not a mistake I will have to specify an ignore rule on this field, and when mapping from DTO to Model the property will be set to the default value, 0 in this case.
[csharp]
    //mapping using AutoMapper:
    Mapper.CreateMap&lt;Model, DTO&gt;();
    Mapper.CreateMap&lt;DTO, Model&gt;()
        .ForMember(x=&gt;x.Age, y=&gt;y.Ignore());
    Mapper.AssertConfigurationIsValid();

...

    Model model = Mapper.Map&lt;DTO, Model&gt;(dto);

[/csharp]
Now we have a two way mapping set up with validation. If to the DTO class a new property is added, but not to the Model class a runtime exception will be thrown when validating the configuration. As long as properties with same name and convertible types (AutoMapper can also convert automatically from one type to another) are added to both classes validation will run successfully, and you’ll have automatic mapping hassle free.

Right, but there is one more thing to cover. Where do you write the map configuration code, and how to use the mapping code in a more elegant way? 

Starting with C# 3.0 Microsoft gave us Extension methods, which is a great thing I must say. Using extension methods, we can create a class that is used for mapping methods, that way we can call methods on DTO and Model classes like if it was part of them, but keep the code in a separate place, in such a way that DTO and Model mustn’t know about the existence of each other. Isn’t that confusing?

But this article is not about creating n-layer applications, and how to decouple the layers but about using AutoMapper, so I’ll skip to the code first and discuss it after you have a sneak peek:
[csharp]
    public static class MappingExtensions
    {
        static MappingExtensions()
        {
            Mapper.CreateMap&lt;Model, DTO&gt;();
            Mapper.CreateMap&lt;DTO, Model&gt;()
                .ForMember(x =&gt; x.Age, y =&gt; y.Ignore());
            Mapper.AssertConfigurationIsValid();
        }

        public static Model ToModel(this DTO dto)
        {
            return Mapper.Map&lt;DTO, Model&gt;(dto);
        }

        public static DTO ToDTO(this Model model)
        {
            return Mapper.Map&lt;Model, DTO&gt;(model);
        }
    }

...

    //create the source object:
    Model model = new Model
    {
        Name = &quot;John&quot;,
        Surname = &quot;Black&quot;,
        Age = 35
    };

    //map to DTO
    DTO dto = model.ToDTO();
[/csharp]
So now we have a MappingExtensions class with extension methods. We have to add a using to it’s namespace and we can call ToModel() and ToDTO() method on the Model and DTO classes. The mapping configuration is done in the static constructor. The only drawback of this method is that if the validations is unsuccessful you get a “The type initializer for 'Mapping.MappingExtensions' threw an exception.” Exception which is a bit confusing, and the AutoMapper exception is wrapped in the inner exception, so you must always investigate the inner exceptions (and I don’t mean only when working with AutoMapper).

Now you know not only how to make automatic mappings that are being validated at runtime, but also how to make it elegantly. There is one more thing you must know, it has a price to pay. You can’t use AutoMapper for high performance applications. There is a big penalty for all the under the hood operations that AutoMapper does. But its usage is more then motivated when you are dealing with moderate quantities of data to be transferred or when you have to build a stable system.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2011-02-06 15:46:36</wp:post_date>
		<wp:post_date_gmt>2011-02-06 13:46:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>automapper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="automapper"><![CDATA[automapper]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>160</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; Unit Testing Mapping Methods Cyber KinetX]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.blog.cyberkinetx.com/2011/03/20/unit-testing-mapping-methods/</wp:comment_author_url>
			<wp:comment_author_IP>173.236.177.4</wp:comment_author_IP>
			<wp:comment_date>2011-03-20 11:40:45</wp:comment_date>
			<wp:comment_date_gmt>2011-03-20 09:40:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] make the world spinning Blog         &laquo; AutoMapper [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>208</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; NextMap v0.01 Cyber KinetX]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.blog.cyberkinetx.com/2011/05/09/nextmap-v0-01/</wp:comment_author_url>
			<wp:comment_author_IP>173.236.177.4</wp:comment_author_IP>
			<wp:comment_date>2011-05-09 10:01:09</wp:comment_date>
			<wp:comment_date_gmt>2011-05-09 08:01:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] covered a very basic usage of AutoMapper in a previous article here. NextMap is built with compatibility with AutoMapper in mind, so all you need to do is just change [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1304928083.0201";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Unit Testing Mapping Methods</title>
		<link>http://www.blog.cyberkinetx.com/2011/03/20/unit-testing-mapping-methods/</link>
		<pubDate>Sun, 20 Mar 2011 09:40:38 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=44</guid>
		<description></description>
		<content:encoded><![CDATA[When you have a big solution with a lot of DTOs and Entities that map one to another across layers, it creates a risk of fields that are forgotten to be added to one or another, or mapped. Such errors can be very hard to spot by the test team, and they may easily end up in production.

In my previous article I described the benefits of using AutoMapper, which also include ease of unit testing. But there is a downside to it - Performance!

When it comes to choosing between performance and ease of unit testing, the choice is usually simple. Even I, in spite of how much I like it, chose to go the old fashion way, and to do the mapping methods manually.

I've been giving a lot of thought on how to be able to test the mapping methods, when AutoMapper is not used, and the conclusion I came to is.. to use AutoMapper! Don't get too confused, I decided on using the AutoMapper in the unit tests so a parallel automatic mapping is done that will verify the manual mapping.

But before I could do that, I needed a way to compare two objects that did not have Equals() method overloaded, as I could not count on it to be implemented for the tested entities, or for it to be correctly implemented. The solution was reflection.

Let's dig into it and see how it all works nicely. First the DTOs:

[csharp]
    public class CustomerDto
    {
        public AddressDto Address { get; set; }
        public string Name { get; set; }
        public DateTime DateOfBirth { get; set; }
        public int? Accusitions { get; set; }
    }

    public class AddressDto
    {
        public Country Country { get; set; }
        public string City { get; set; }
        public string AddressLine { get; set; }
        public string ZipCode { get; set; }
    }

    public enum CountryDto
    {
        USA,
        UK
    }
[/csharp]

The DTOs are a customer with some properties and with an address. Now for the Domain classes:

[csharp]
    public class Customer
    {
        public Address Address { get; set; }
        public string Name { get; set; }
        public DateTime DateOfBirth { get; set; }
        public int? Accusitions { get; set; }
    }

    public class Address
    {
        public Country Country { get; set; }
        public string City { get; set; }
        public string AddressLine { get; set; }
        public string ZipCode { get; set; }
    }

    public enum Country
    {
        USA,
        UK
    }
[/csharp]

Now that we have the required DTOs and Domain classes, let's write some mapping methods:

[csharp]
    public static class Mapper
    {
        public static Customer ToDomain(this CustomerDto dto)
        {
            if (dto == null) return null;

            return new Customer
            {
                Accusitions = dto.Accusitions,
                Address = dto.Address.ToDomain(),
                DateOfBirth = dto.DateOfBirth,
                Name = dto.Name
            };
        }

        public static Address ToDomain(this AddressDto dto)
        {
            if (dto == null) return null;

            return new Address
            {
                AddressLine = dto.AddressLine,
                City = dto.City,
                Country = (Country)dto.Country,
                ZipCode = dto.ZipCode
            };
        }
    }
[/csharp]

The Mapper contains extension method for mapping, this way it's simpler and more intuitive to use them. Implementing the mapping method in the DTO class or in the Domain class is often impossible, and as a general rule bad practice.

Now that everything that we want to be tested is in place, let's see how a classical UT would look like:

[csharp]
        [TestMethod]
        public void Customer_Mapping_Classic_Test()
        {
            //create a DTO object that will be mapped to Domain
            CustomerDto customerDto = new CustomerDto
            {
                Accusitions = 10,
                DateOfBirth = new DateTime(1980, 3, 3),
                Name = &quot;Robert Black&quot;,
                Address = new AddressDto
                {
                    Country = CountryDto.UK,
                    AddressLine = &quot;Some street, 27, ap. 10&quot;,
                    City = &quot;London&quot;,
                    ZipCode = &quot;423562&quot;
                }
            };

            //calling the tested method
            Customer customer = customerDto.ToDomain();

            //verify the expectations
            Assert.AreEqual(10, customer.Accusitions);
            Assert.AreEqual(new DateTime(1980, 3, 3), customer.DateOfBirth);
            Assert.AreEqual(&quot;Robert Black&quot;, customer.Name);
            Assert.AreEqual(Country.UK, customer.Address.Country);
            Assert.AreEqual(&quot;Some street, 27, ap. 10&quot;, customer.Address.AddressLine);
            Assert.AreEqual(&quot;London&quot;, customer.Address.City);
            Assert.AreEqual(&quot;423562&quot;, customer.Address.ZipCode);
        }
[/csharp]

As you can see it is straight forward. But what does it really test? Only that the end values are those expected. It won't make any assumptions for new fields that will be added to the DTO or Domain classes unless the programmer remembers to add them to the UT. Another downside is, if you have a big complex object, it takes a lot of lines to write the test, and more than that, it is error prone.

But I wanted a UT that will test my mappings at all times, and under any circumstances. If a field is added to the Domain class and corresponding field isn't added and mapped to DTO class I want my tests to catch that, and fail until the programmer explicitly ignores that field as being relevant only to the BL Layer.

Let's see the test and then discuss it:

[csharp]
        [TestMethod]
        public void Customer_Mapping_Test()
        {
            AutoMapper.Mapper.CreateMap&lt;CustomerDto, Customer&gt;();
            AutoMapper.Mapper.CreateMap&lt;Customer, CustomerDto&gt;();
            AutoMapper.Mapper.CreateMap&lt;AddressDto, Address&gt;();
            AutoMapper.Mapper.CreateMap&lt;Address, AddressDto&gt;();
            AutoMapper.Mapper.AssertConfigurationIsValid();

            //create a DTO object that will be mapped to Domain
            CustomerDto customerDto = new CustomerDto
            {
                Accusitions = 10,
                DateOfBirth = new DateTime(1980, 3, 3),
                Name = &quot;Robert Black&quot;,
                Address = new AddressDto
                {
                    Country = CountryDto.UK,
                    AddressLine = &quot;Some street, 27, ap. 10&quot;,
                    City = &quot;London&quot;,
                    ZipCode = &quot;423562&quot;
                }
            };

            Customer manualMapping = customerDto.ToDomain();
            Customer autoMapping = AutoMapper.Mapper.Map&lt;CustomerDto, Customer&gt;(customerDto);

            bool testResult = ReflectionComparer.Equal(manualMapping, autoMapping);
            Assert.IsTrue(testResult);
        }
[/csharp]

So what is different? First of all, there is the AutoMapper involved. The 2 way mapping has been defined on the lines 4 to 7, and then the mappings have been validated on line 8. If the mappings won't be 1 to 1 the AssertConfigurationIsValid will throw an Exception. In my <a href="http://www.blog.cyberkinetx.com/2011/02/06/automapper/">previous article</a> I've described how to use this mappings. You can set rules to ignore fields, or to map one field to another with a different name, but for that you should read the referred link from the previous article.

The DTO object initialization is the same as in the classical test. We create a Customer object using our mapping method ToDomain(). Next the magic starts, anothe Customer object is created using the automatic mapping. The mapping is done using rules set up on lines 4-7. In our test we supposed the mapping is one to one so no rules were necessary.

The last, and most important part is the ReflectionComparer.Equal() method. Using reflection it compares the two objects to have same values. Here is the code:

[csharp]
public class ReflectionComparer
{
    /// &lt;summary&gt;
    /// Compares two objects by reflection and decides if they are equal as value or not.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;source&quot;&gt;The source object to compare.&lt;/param&gt;
    /// &lt;param name=&quot;target&quot;&gt;The target object to be compared against.&lt;/param&gt;
    /// &lt;returns&gt;true if the objects are same as value, false otherwise.&lt;/returns&gt;
    public static bool Equal(object source, object target)
    {
        //check for null and null combinations
        if (source == null &amp;&amp; target == null) return true;
        if (source == null || target == null) return false;

        //after this point source and target are sure to be instantiated

        Type sourceType = source.GetType();
        Type targetType = target.GetType();
        if (!sourceType.Equals(targetType)) return false;

        //get all the properties and compare them
        PropertyInfo[] properties = sourceType
            .GetProperties(BindingFlags.Public | BindingFlags.Instance);
        foreach (PropertyInfo propertyInfo in properties)
        {
            //skip setter only properties
            if (!propertyInfo.CanRead) continue;

            //check if it is a index parameter and skip if so
            if (propertyInfo.GetIndexParameters().Count() != 0) continue;

            //read the values of the properties for source and target
            Object sourceValue = propertyInfo.GetValue(source, null);
            Object targetValue = propertyInfo.GetValue(target, null);

            //first check for nulls
            //if both nulls skip to the next property 
            if (sourceValue == null &amp;&amp; targetValue == null) continue;
            //if one is null and the other is not then the objects
            //are not same as value
            if (sourceValue == null || targetValue == null) return false;

            if (propertyInfo.PropertyType.IsPrimitive || 
                propertyInfo.PropertyType.IsEnum || 
                propertyInfo.PropertyType == typeof(string))
            {
                //all primitive types, enums and strings can be 
                //safely compared using Equals()
                if (!sourceValue.Equals(targetValue)) return false;
            }
            else if (propertyInfo.PropertyType.IsValueType)
            {
                //unless you use structs it's safe to suppose it's a standard type
                //and can be compared with Equals()
                if (!sourceValue.Equals(targetValue)) return false;
            }
            else if (sourceValue is System.Collections.IEnumerable)
            {
                //special treatment is required, unless it is used
                //no need to support it
                throw new NotImplementedException();
            }
            else
            {
                //finally we can do recursive comparison
                if (!Equal(sourceValue, targetValue)) return false;
            }
        }

        //if we got here it's safe to assume the values are same
        return true;
    }
}
[/csharp]

I wrote this method to suit my needs, and must warn you, it is not ready to compare any classes. The limitations of which I am aware of (can't guarantee it's bug free): can't compare properties that are List, Dictionary and so on. For that I added the condition for IEnumerable and an exception throwin NotImplementedException(), so in case there happens to be such an case no strange results will be returned. Feel free to implement it if you need it in your code, and don't forget to drop me a message with the solution :) The other limitation, all Structures must have the Equals() method overridden. Actually that's more of a good practice than a limitation.

As a side note, this Equal() method can be used for unit testing the overridden Equals() methods.

At this point all the insights of the UT are explained, but not much as general. This unit test will check that the DTO and Domain classes are same as structure, and that the mapping method maps all properties. Whenever a new set of  properties will be added to both classes, and the mapping will be updated for them, the unit test will be already validating that. If the programmer adds the properties but forgets to update the mapping, the test will fail. If the programmer adds a property only in one class, the test will fail. If the Properties are named differently in the DTO and Domain the test will fail. For the last two, special conditions might apply, and the programmer might not want all properties from Domain being mapped to the DTO. And naming of the properties can be different as desired by some conditions.

Because I defined mapping method only from DTO to Domain, I'm going to add a new field to the CustomerDTO that I do not want to be mapped into the Domain object, check that the test fails, and then update the test to explicitly ignore this new field. 

[csharp]
    public class CustomerDto
    {
        public AddressDto Address { get; set; }
        public string Name { get; set; }
        public DateTime DateOfBirth { get; set; }
        public int? Accusitions { get; set; }
        public string SessionCode { get; set; }
    }
[/csharp]

The new field is SessionCode. If I rerun the test, the test will fail with the exception:
<blockquote>Test method MappingTests.UnitTest.Customer_Mapping_Test threw exception: 
AutoMapper.AutoMapperConfigurationException: The following 1 properties on MappingTests.CustomerDto are not mapped: 
	SessionCode
Add a custom mapping expression, ignore, or rename the property on MappingTests.Customer.</blockquote>

Now to update the test:

[csharp]
        [TestMethod]
        public void Customer_Mapping_Test()
        {
            AutoMapper.Mapper.CreateMap&lt;CustomerDto, Customer&gt;();
            AutoMapper.Mapper.CreateMap&lt;Customer, CustomerDto&gt;()
                .ForMember(x =&gt; x.SessionCode, y =&gt; y.Ignore());
            AutoMapper.Mapper.CreateMap&lt;AddressDto, Address&gt;();
            AutoMapper.Mapper.CreateMap&lt;Address, AddressDto&gt;();
            AutoMapper.Mapper.AssertConfigurationIsValid();

            //create a DTO object that will be mapped to Domain
            CustomerDto customerDto = new CustomerDto
            {
                Accusitions = 10,
                DateOfBirth = new DateTime(1980, 3, 3),
                Name = &quot;Robert Black&quot;,
                Address = new AddressDto
                {
                    Country = CountryDto.UK,
                    AddressLine = &quot;Some street, 27, ap. 10&quot;,
                    City = &quot;London&quot;,
                    ZipCode = &quot;423562&quot;
                }
            };

            Customer manualMapping = customerDto.ToDomain();
            Customer autoMapping = AutoMapper.Mapper.Map&lt;CustomerDto, Customer&gt;(customerDto);

            bool testResult = ReflectionComparer.Equal(manualMapping, autoMapping);
            Assert.IsTrue(testResult);
        }
[/csharp]

The added line is <em>.ForMember(x => x.SessionCode, y => y.Ignore());</em>. That tells AutoMapper to ignore this field when mapping from a Domain object to a DTO, but our mapping is the other way arround?.. Well, wehave to validate AutoMapper rules both ways to spot new properties on DTO or Domain classes.

Next special case is when the names are different. I'll rename the Country property from the Address Domain class to HomeCountry:

[csharp]
    public class Address
    {
        public Country HomeCountry { get; set; }
        public string City { get; set; }
        public string AddressLine { get; set; }
        public string ZipCode { get; set; }
    }
[/csharp]

If I run the UTs now, I will get one UT failed, the one with AutoMapper. Unfortunately this can't be simplified in any way, so I'll have to go and update the mapping rules for AUtoMapper:

[csharp]
        [TestMethod]
        public void Customer_Mapping_Test()
        {
            AutoMapper.Mapper.CreateMap&lt;CustomerDto, Customer&gt;();
            AutoMapper.Mapper.CreateMap&lt;Customer, CustomerDto&gt;()
                .ForMember(x =&gt; x.SessionCode, y =&gt; y.Ignore());
            AutoMapper.Mapper.CreateMap&lt;AddressDto, Address&gt;()
                .ForMember(x =&gt; x.HomeCountry, y =&gt; y.MapFrom(z =&gt; z.Country));
            AutoMapper.Mapper.CreateMap&lt;Address, AddressDto&gt;()
                .ForMember(x =&gt; x.Country, y =&gt; y.MapFrom(z =&gt; z.HomeCountry));
            AutoMapper.Mapper.AssertConfigurationIsValid();

            //create a DTO object that will be mapped to Domain
            CustomerDto customerDto = new CustomerDto
            {
                Accusitions = 10,
                DateOfBirth = new DateTime(1980, 3, 3),
                Name = &quot;Robert Black&quot;,
                Address = new AddressDto
                {
                    Country = CountryDto.UK,
                    AddressLine = &quot;Some street, 27, ap. 10&quot;,
                    City = &quot;London&quot;,
                    ZipCode = &quot;423562&quot;
                }
            };

            Customer manualMapping = customerDto.ToDomain();
            Customer autoMapping = AutoMapper.Mapper.Map&lt;CustomerDto, Customer&gt;(customerDto);

            bool testResult = ReflectionComparer.Equal(manualMapping, autoMapping);
            Assert.IsTrue(testResult);
        }
[/csharp]

Horray, the tests are green! Now I used ForMember() method again, but instead of Ignore(), I mapped the fields using MapFrom(). More complex rules for mapping can be defined, but this are not part of this article.

To conclude it all, unit test careful your mapping methods, and you might end up doing a lot less debugging in the long run.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>44</wp:post_id>
		<wp:post_date>2011-03-20 11:40:38</wp:post_date>
		<wp:post_date_gmt>2011-03-20 09:40:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-mapping-methods</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="automapper"><![CDATA[automapper]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="unit-testing"><![CDATA[unit testing]]></category>
		<category domain="post_tag" nicename="ut"><![CDATA[ut]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>167</wp:comment_id>
			<wp:comment_author><![CDATA[Mobeen Anwar]]></wp:comment_author>
			<wp:comment_author_email>mobeen.anwar@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.sephura.com/</wp:comment_author_url>
			<wp:comment_author_IP>81.99.225.243</wp:comment_author_IP>
			<wp:comment_date>2011-03-21 13:19:50</wp:comment_date>
			<wp:comment_date_gmt>2011-03-21 11:19:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Cool blog entry. Not sure if I missed the point, but why did you decide to implement the mapping methods manually?

Also, shouldn't the sub-title of your blog be 'keep the world spinning' and not 'make the world spinning'? :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>205</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.97.214.191</wp:comment_author_IP>
			<wp:comment_date>2011-04-02 11:35:25</wp:comment_date>
			<wp:comment_date_gmt>2011-04-02 09:35:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I tried to present how to test automatic mappings in my previous blog post, and also provide a way to test manual mappings as well.
The reason for creating mapping method might be only in performance, as AutoMapper does a great job but poor performance when it comes to mapping big volumes of data like stressed web services. 

Yeah, the sub-title.. I'm still thinking what to do with it, but thnx for the suggestion!

p.s. keep tuned in as I am going to explore AutoMapper further on in my posts, unfortunately I got very little free time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1301736925.5864";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>206</wp:comment_id>
			<wp:comment_author><![CDATA[&raquo; IgnoreMapAttribute for AutoMapper Cyber KinetX]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.blog.cyberkinetx.com/2011/04/25/ignoremapattribute-for-automapper/</wp:comment_author_url>
			<wp:comment_author_IP>173.236.177.4</wp:comment_author_IP>
			<wp:comment_date>2011-04-25 12:15:51</wp:comment_date>
			<wp:comment_date_gmt>2011-04-25 10:15:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] my last few posts I talked about AutoMapper, using AutoMapper for Unit Testing and even about something that I am working on similar to AutoMapper, and this is a continuation to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1303726578.958";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>NextMap</title>
		<link>http://www.blog.cyberkinetx.com/2011/04/10/nextmap/</link>
		<pubDate>Sun, 10 Apr 2011 14:31:33 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[A teaser post.

I just got a first version (more of a PoC) of an alternative AutoMapper implementation. First impressions are really encouraging. The mapping time is blazing fast. Also the API will be similar to AutoMapper for easier migration. So far the only disadvantage is the mapped types must be public. When the project will be ready for a first beta I will move it to <a title="github" href="http://github.com">github</a>

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/04/NextMap1.png"><img class="alignnone size-medium wp-image-51" title="NextMap" src="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/04/NextMap1-300x151.png" alt="" width="300" height="151" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2011-04-10 16:31:33</wp:post_date>
		<wp:post_date_gmt>2011-04-10 14:31:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nextmap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auto-mapping"><![CDATA[auto mapping]]></category>
		<category domain="post_tag" nicename="automapper"><![CDATA[automapper]]></category>
		<category domain="post_tag" nicename="nextmap"><![CDATA[nextmap]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.Net constructor and instance variable order</title>
		<link>http://www.blog.cyberkinetx.com/?p=86</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[In the era of internet, less developers learn by reading the specs, but mostly by learning from examples. When learning by examples a lot of aspects are lost. Take a book on C#. Read it from first page till the last, and even if you're an experienced programmer, you'll find quite a lot of things you didn't know or forgot.

[csharp]
--need an example with inheritance
class A
{
  private int a = 10;

  public int AProperty { get { return a; } }

  public A()
  {
    a = 20;
  }
}
[/csharp]

When you instantiate an object of class A, what will be the value of AProperty? If you thought 20, you are correct.

The simple rule of thumb would be: first the global variables are instantiated, in the order they appear in the class, from the derived class down to the base class, then the constructors are executed from the base class up to the derived class. Boring.

It's the statics where everything gets more interesting.. and confusing.
http://msdn.microsoft.com/en-us/library/aa645758(v=vs.71).aspx
http://msdn.microsoft.com/en-us/library/aa645612(v=vs.71).aspx]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2013-07-01 20:54:25</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_197c6d78c2396ee1392093b025a5724c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8c6b2bba349b1bc40d023c26a3d1c398</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>prepare your config for deployment</title>
		<link>http://www.blog.cyberkinetx.com/2011/10/24/prepare-your-config-for-deployment/</link>
		<pubDate>Mon, 24 Oct 2011 06:47:13 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[[ps]
function Config-Merge{
    Param([Parameter(Position=0,Mandatory=$true)][string]$configFile,
    [Parameter(Position=1,Mandatory=$true)][string]$replaceFile)
    
    $f = get-content $replaceFile
    $expression = &quot;.\XmlConfigMergeConsole.exe `&quot;{0}`&quot;&quot;
    foreach ($s in $f) {
        $expression += &quot; -r {0}&quot; -f $s
    }
    $expression = $expression -f $configFile
    write $expression
    invoke-expression $expression
    write &quot;Done!&quot;
}
[/ps]

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/10/XmlConfigMergeConsole.exe">XmlConfigMergeConsole</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2011-10-24 08:47:13</wp:post_date>
		<wp:post_date_gmt>2011-10-24 06:47:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>prepare-your-config-for-deployment</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.Net Down Casting</title>
		<link>http://www.blog.cyberkinetx.com/2012/07/30/net-down-casting/</link>
		<pubDate>Mon, 30 Jul 2012 08:34:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=135</guid>
		<description></description>
		<content:encoded><![CDATA[A necromancer's dream come true, down casting in .Net. Now how awesome is that?

[csharp]
SimpleA a = new SimpleA(stringDatat, intData) { Letter = charData };

//down casting
SimpleB b = new SimpleB(&quot;s&quot;, 1, decimalData);
b = b.CopyFrom(a);
[/csharp]

The sources are still very raw. Suports just down casting from a class with primitives to a derived class with primitives.

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2012/07/DownCasting.zip">DownCasting PoC download</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2012-07-30 10:34:51</wp:post_date>
		<wp:post_date_gmt>2012-07-30 08:34:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>net-down-casting</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fiddler on the server side</title>
		<link>http://www.blog.cyberkinetx.com/?p=159</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[Fiddler Reverse Proxy

http://fiddler2.com/documentation/Configure-Fiddler/Tasks/UseFiddlerAsReverseProxy

http://fiddler2.com/documentation/KnowledgeBase/FiddlerScript/ModifyRequestOrResponse]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2013-06-04 00:52:14</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Entity Framework context per request</title>
		<link>http://www.blog.cyberkinetx.com/2011/05/15/entity-framework-context-per-request/</link>
		<pubDate>Sun, 15 May 2011 10:09:16 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=47</guid>
		<description></description>
		<content:encoded><![CDATA[Are you still using the

[csharp]
using (DBContext context = new DBContext())
{
  ..
}
[/csharp]

way of accessing the database? I mean that's cool, at least you are sure you don't have connection pooling penalties. But where do you write this code? Do you have a Data Access Layer? How about accessing the Navigation Properties outside the using block? How about assuring a developer does not forget about the context restrictions and tries to access a related table outside the context?

<!--more-->

I've seen developers creating the context inline without a using block, and then not bothering about disposing it, leaving this "monkey business" to the garbage collector. Because it was a web service project with a lot of access I volunteered to fix it, and encapsulate all contexts in using blocks. I didn't bother to test it.. I mean what could go wrong, right? It was the DAL. Because of a combination of unfortunate events, the code found it's way to live and crashed.. Somebody was using a Navigation Property in the Business Layer. The only reason why it did not crash before was the garbage collector, it was not disposing the context fast enough, so you could still write some code in the business before the context was disposed. A race against time actually..

On the next project, my first idea was to make all Navigation Properties in the entities as internal only to the DAL. But then cam the architect suggesting we use linq on the entities from the BL. That means the Entity Framework context must continue hes existence at the Business Layer (but not accessible). The solution? Unit Of Work.

First of all we created the Data Access Layer. Entity Framework as a concept is a DAL by itself, but we needed to separate it from our code for the sake of UT simplicity and because it simply is a good practice. It's a lot simple to mock an interface than the EF. Inside the DAL project we created the Repository class that did all the DB access job. Actually it has only CRUD operations. For example:

[csharp]
public IQueryable Customers { get { ... } }

public void Add(Customer customer)
{
  ..
}

public void Delete(Object entity)
{
  ..
}
[/csharp]

You may argue this are not CRUD because there is not Update operation. But because the Customer is exposed by the Customers property it can be updated by anybody outside the repository, and so it does expose the Update operation.

I skipped the implementation details as you are not ready to see it. All at it's time. Let's see what this CRUD operations give us. We have a repository that doesn't have for ex. GetCustomerOwingMoney(), or GetNewOrders(). From a OOP point of view that would be operations on the Customer collection and Order collections. It does make sens not to write them in our BL. Very well then, let's write them on the IQueryable&lt;Customer&gt; collection:

[csharp]
public IQueryable&lt;Customer&gt; OwingMoney(this IQueryable&lt;Customer&gt; customers)
{
  return customers.Where(x =&gt; x.Balance &lt; 0);
}
[/csharp]

Hey, that's an extension method! We followed the OOP way and got ourselves a collection of customers with a OwingMoney() method on it. Ain't that awesome? As part of our project we created extension methods for all entities that needed operations on the collections (before putting just any method as an extension think first if it's a BL related or it'a an operation related to that particular type). As a convention the classes with extension methods are called CustomerExtensions, OrderExtensions, etc. Pushing that forward, we also have partial classes for the entities with properties and methods, like OwsMoney (taking the previous example), or Suspend() to suspend a customer if he refuses to pay. So the extensions can be used from the BL in a kind of fluent way.

A question that might arise at this point is - if we have all this logic in the extension method and in the partial classes, what do we actually put in the BL? And indeed there is no thin border where the extension methods end and the BL starts. So far our rule is to put all the reusable code where possible to the extension methods and partial classes, the rest would be the BL.  For example, let's say we need a method to suspend all customers that owe money to the shop, and have more than 2 open orders (i guess it has no logic but just for the sample sake), that can be done as an extension on the IQueryable&lt;Customer&gt;, but it will not be reused anywhere as it's an action that will be triggered by some scheduled process. So it makes a lot of sense to write it in the BL:

[csharp]
public void SuspendBadCustomers()
{
  repository.Customers.OwingMoney()
    .Where(x =&gt; x .Orders.OpenOrders.Count() &gt; 2).ToList()
    .ForAll(x =&gt; x.Suspend());
}
[/csharp]

Does that make sense? Not with a classic repository. As far we didn't save the changes. We can just leave it like that. It will be saved.. eventually. And how in the world we dispose the context?? Oh well, we have the UnitOfWork for that.

Before I start discussing the UnitOfWork implementation I will assume you are familiar with Dependency Injection and Inversion of Control as explaining them is out of the scope of this post.

For the current post I will do a very simple UnitOfWork just to satisfy the problem of having a context persisted along the lifetime of the HTTP Request. More complext implementation would mean supporting multiple contexts, supporting different object persistence on the UnitOfWork.

[csharp]
public class UnitOfWork : IUnitOfwork, IDisposable
{
  public ObjectContext Context { get; set; }
  public DbTransaction Transaction { get; set; }

  public void Commit()
  {
    if (Context != null)
    {
      ObjectContext.SaveChanges();
      Transaction.Commit();
    }
  }

  public void Dispose()
  {
    if (Context != null)
    {
      Transaction.Dispose();
      Transaction = null;
      Context.Dispose();
      Context = null;
    }
  }
}
[/csharp]

Here we have 2 properties for Context and another for Transaction. Because of the per request behavior, we can't use the TransactionScope any more, so we'll go with a bit old fashion way of working with transactions.

Next step would be to configure the IoC container to treat IUnitOfWork with a lifetime that would give the same instance for a HTTP Request. Meaning, whenever I'll call my IoC like

[csharp]
IUnitOfWork unit = IoCContainer.Resolve&lt;IUnitOfWork&gt;();
[/csharp]

I will be getting the same instance of the UnitOfWork in a single HTTP Request (to not be confused with HTTP Session).

Next step is to configure the Global.asax to handle the UnitOfWork, committing it when the request ends, and just disposing it when an exception is thrown so the transaction will be rolled back. What you need to add to the Global.asax:

[csharp]
public void Application_EndRequest(Object sender, EventArgs e)
{
  IUnitOfWork unit =  IoCContainer.Resolve&lt;IUnitOfWork&gt;();
  unit.Commit();
  unit.Dispose();
}

public void Application_Error(Object sender, EventArgs e)
{
  IUnitOfWork unit =  IoCContainer.Resolve&lt;IUnitOfWork&gt;();
  unit.Dispose();
  //don't forget to treat the error here
}
[/csharp]

No actions are required on BeginRequest event. But so far the Entity Framework context isn't initialized anywhere. It would make sense to initialize the context only when required. Some request might not hit the DB so why the extra penalty? Because I don't want my BL to know much about EF I decided to do the initialization in Repository. I created a GetContext() method that returns the context whenever it is required. And because dependency injection is used the UnitOfWork can be set up as a parameter in the constructor and it will be injected when the Repository is instantiated (preferably by IoC as well):

[csharp]
public class Repository : IRepository
{
  private IUnitOfWork unitOfWork;

  public Repository(IUnitOfWork unitOfWorkk)
  {
    this.unitOfWork = unitOfWork;
  }

  //CRUD operations code would be here
  //..

  private OurDbContext GetContext()
  {
    if (unitOfWork.Context == null)
    {
      unitOfWork.Context = new OurDbContext();
      unitOfWork.Transaction = unitOfWork.Context.BeginTransaction();
    }

    return (OurDbContext)unitOfWork.Context;
  }
}
[/csharp]

We are almost there. Just have to update our CRUD operations example, with the GetContext():

[csharp]
public IQueryable&lt;Customer&gt; Customers 
{ 
  get { return GetContext().Customers; } 
}

public void Add(Customer customer)
{
  GetContext().Customers.Add(customer);
}

public void Delete(Object entity)
{
  GetConetxt().DeleteObject(entity);
}
[/csharp]

We are there. Let's summarize what we got. We have a UnitOfWork that is a-kind-of-singleton, that is retrieved using IoC, and will have the same instance as long it's in the context of the same HTTP Request. In the repository whenever the first db operations is called a context and a transaction is created and saved on the UnitOfWork. The context will be reused in the repository as long as it's doing operations for the same HTTP Request. Whenever the HTTP Request ends (a HTTP Reply is issued to the client), in case of no exceptions the transaction will be committed and all changes will be saved to the database, in case of exceptions the transaction will be reverted and a nice message must be issued to the end user, and a error log should be created. On the next request another UnitOfWork is created and another context.

For the Business Layer, we have safe access to the Navigation Properties, extension methods can be used for any entities. Performance increases because BL does not access repository methods for different actions creating new instances of the ObjectContext.

I've been asked if keeping a context for so long isn't a performance issue by itself. The answer would be "depends". If you are building a web site like Facebook you'll probably search for other options (and most probably give up on EF). The pool size for the context has a default size of 100. That means you can have 100 requests that are processed in parallel, the 101 will wait for a context to be free. When you get to more then 100 parallel requests you'll probably have other bottlenecks to worry about, and will already be thinking about load balancing.

If I may return to the problem of SaveChanges(). In the presented examples it is never called from Repository or BL as the examples are fairly simple. In more complicated scenarios it will be necessary so in our implementation we have a Save() method implemented in the repository that simply calls the SaveChanges() on the context. A scenario when you need it would be when you add to repository new entities, and then do a Where() and expect to find them. Well.. if you want' save them before the Where() operation, you won't.. That's how EF works. Same with the changes. So if you need to add/update something and use that in the next query, do a save first. That has been one of my most common mistakes...

I did not treat the problem of lazy loading in this article as it's outside the scope but when you start working with EF and use a lot of Navigation Properties keep this problem in mind.

Got questions?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>47</wp:post_id>
		<wp:post_date>2011-05-15 12:09:16</wp:post_date>
		<wp:post_date_gmt>2011-05-15 10:09:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>entity-framework-context-per-request</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="codeproject"><![CDATA[CodeProject]]></category>
		<category domain="post_tag" nicename="ef"><![CDATA[EF]]></category>
		<category domain="post_tag" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="unit-of-work"><![CDATA[Unit Of Work]]></category>
		<category domain="post_tag" nicename="unitofwork"><![CDATA[unitofwork]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>307</wp:comment_id>
			<wp:comment_author><![CDATA[StephRivNor]]></wp:comment_author>
			<wp:comment_author_email>vishten@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.95.253.73</wp:comment_author_IP>
			<wp:comment_date>2012-01-11 15:29:24</wp:comment_date>
			<wp:comment_date_gmt>2012-01-11 13:29:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's a really good post there!

Btw, there are some typos in your code and some errors as well : 

context.Connection.BeginTransaction() should be unitOfWork.Context.Connection.BeginTransaction(), and also the connection should open at that time.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326288564.9091";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328087942.4315";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>317</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.126.146.3</wp:comment_author_IP>
			<wp:comment_date>2012-02-01 11:26:42</wp:comment_date>
			<wp:comment_date_gmt>2012-02-01 09:26:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for the mention. I'll try to fix the typos and review the code samples, and hope it is useful :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>307</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328088402.7538";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>517</wp:comment_id>
			<wp:comment_author><![CDATA[Dean]]></wp:comment_author>
			<wp:comment_author_email>halftrack@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.21.166.21</wp:comment_author_IP>
			<wp:comment_date>2012-08-23 00:06:05</wp:comment_date>
			<wp:comment_date_gmt>2012-08-22 22:06:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Helpful, thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1345673165.4325";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1347032018.4784";s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1347032024.1802";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>547</wp:comment_id>
			<wp:comment_author><![CDATA[Skog]]></wp:comment_author>
			<wp:comment_author_email>skogtroll@yandex.ru</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>176.195.54.160</wp:comment_author_IP>
			<wp:comment_date>2012-10-21 16:22:09</wp:comment_date>
			<wp:comment_date_gmt>2012-10-21 14:22:09</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for a useful post. A little question: you resolve and dispose the UnitOfWork in Application_EndRequest - doesn't in mean, if I did not make any db operations during the request - the context is still created just to be disposed?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1350829329.237";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1351534380.6208";s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1351534407.4985";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>559</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.75.37.222</wp:comment_author_IP>
			<wp:comment_date>2012-10-29 20:14:54</wp:comment_date>
			<wp:comment_date_gmt>2012-10-29 18:14:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The UnitOfWork will be created, but the context is created in the repository class and only when a db operation is required. In Application_EndRequest we mostly check that there is nothing left uncommited.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>547</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1351534494.7007";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>IgnoreMapAttribute for AutoMapper</title>
		<link>http://www.blog.cyberkinetx.com/2011/04/25/ignoremapattribute-for-automapper/</link>
		<pubDate>Mon, 25 Apr 2011 10:15:45 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[Yet another post about AutoMapper and something new that I contributed to it's source code.

In my last few posts I <a title="talked about AutoMapper" href="http://www.blog.cyberkinetx.com/2011/02/06/automapper/">talked about AutoMapper</a>, <a title="using AutoMapper for Unit Testing" href="http://www.blog.cyberkinetx.com/2011/03/20/unit-testing-mapping-methods/">using AutoMapper for Unit Testing</a> and even about something that I am working on similar to AutoMapper, and this is a continuation to the series :) At a certain moment in time I felt that I needed some extra automation from AutoMapper and since the source code was open I just added the missing parts.

So here is the problem: you are using Entity Framework with POCO, you also have DTOs that should be mapped to these entities and then saved to DB. Defining the mapping rules is a bit complicated since you will most probably have all those Navigation Properties that you'll have to ignore. But the complications don't end here, extending the db model you'll probably have more navigation properties generated over time, and will have to update the mapping rules over and over again to update them to the updated entities.

And here is the solution I came up with: because you are using EF with POCO entities that are generated using the templates, they can be manipulated to generate entities with helper methods, attributes, etc. depending on the type of properties. That's when IgnoreMapAttribute comes in handy. Modifying the template for the POCOs you can add [IgnoreMap] attribute on all navigation properties. Problem solved.

Well.. there is one more aspect you must consider. Mapping this way to an instantiated entity will fail since you can't assign a value to the properties representing primary keys, so be careful.

Using [IgnoreMap] attribute comes handy wherever you have fields that should never be mapped to (not from). Like control fields for entities that are set up auto at each save to db.  You just have to add [IgnoreMap] attribute to the property of the object you are mapping to and there is no more need to define the mapping rules for that field when creating the map.

AutoMapper on CodePlex hasn't been updated for a while now, so you can get the latest source code with support for IgnoreMapAttribute on <a title="github" href="https://github.com/jbogard/AutoMapper/">github</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2011-04-25 12:15:45</wp:post_date>
		<wp:post_date_gmt>2011-04-25 10:15:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ignoremapattribute-for-automapper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Preemptive UI</title>
		<link>http://www.blog.cyberkinetx.com/2011/05/15/preemptive-ui/</link>
		<pubDate>Sun, 15 May 2011 16:49:27 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=58</guid>
		<description></description>
		<content:encoded><![CDATA[In some previous post I mentioned that I am a speed freak. The faster something (anything) runs the better. When I refer to very fast computers I say that they start doing something the moment you think about it. But how Sci-Fi is that? For some time an idea was hovering in my head and a few days ago, after I've put my head on the pillow, I got it.

How about if the program was actually starting to process some button action before you manage to click it? Consider a button that does some lengthy processing, for instance an image transformation. What if it started to process the image the moment you thought about that, and when you click the button for that action it just output the result (if you don't click the button assume you changed your mind on that and the transformations are not applied)?<!--more-->

My dream came true on a lazy Sunday afternoon.

Well not fully.. we are still decades till neural sensors that could sense what we think, and then give up on mice and keyboards. But at least half of the idea is doable today, v00d00 free. All it takes is playing with the button events. An assumption must be made that the moment the cursor enters a button area the users intention is to click it and heavy processing can begin right away. The moment the user actually clicks the button it's a confirmation that he really wants the action to take place. If the cursor moves out of the button that's a cancel event and the operation is aborted (I can think about more complex strategies but that will do just fine for a PoC).

I mentioned that it was a lazy Sunday afternoon, right? So don't expect very much from the code, it was written in a moment of inspiration and is not fully functional (the cancellation event isn't implemented, so reuse the code at you're own risk). Just a PoC.

You can download the sources for the demonstration form. Feel the difference between the "Preemptive Button" and "Simple Button" where both have a Thread.Sleep(1000), but the user experience is different (also depends on how fast you handle your mouse).

To explain the idea, for the preemptive button the action is split between "heavy processing" and "result processing". The simple button does everything in a single action. The "heavy processing" is processed in the background when the PreemtiveEvents senses that the user might have the intention of clicking the button. Once the intention is confirmed, it will wait for the heavy processing to finish and then call the result processing passing it the output value from the previous action. Simple.

[csharp]
	public partial class PreemptiveTestForm : Form
	{
		private DateTime start;

		public PreemptiveTestForm()
		{
			InitializeComponent();
			PreemptiveEvents preemptiveEvents = new PreemptiveEvents();
			preemptiveEvents.RegisterAction(btnPreemptive,
				() =&gt; { Thread.Sleep(1000); return 1; }, //heavy processing
				x =&gt; { MessageBox.Show(&quot;The output is &quot; + x); }); //result processing
		}

		private void btnSimple_Click(object sender, EventArgs e)
		{
			Thread.Sleep(1000);
			MessageBox.Show(&quot;The output is 2&quot;);
		}
	}
[/csharp]

Long running processes will probably not benefit from this technique, but for processes with up to 2-3 sec execution time, the difference is obvious.

To make a stronger point on the Preemtive UI, let's continue on the photos idea. For example you are making a photo viewer program, and one of the most common actions are the rotate buttons (after the next of course). Rotation may take a second, even more depending on the image size and quality. How about implementing preemptive events for that? The user will get a fast result and will be happy that you're program is so much faster than the windows photo viewer (well actually any photo viewer is faster than the windows one..)

I didn't google for any similar techniques, I did it just for fun and I did enjoy doing it. Not sure if it's worth adding as a project to github, the solutions might be so different for different applications and I don't see a point of trying to make a general one.

Did your imagination go crazy? Leave a comment.

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/05/PreemptiveTestApplication.zip">Preemptive Test Application source.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>58</wp:post_id>
		<wp:post_date>2011-05-15 18:49:27</wp:post_date>
		<wp:post_date_gmt>2011-05-15 16:49:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preemptive-ui</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="concept"><![CDATA[Concept]]></category>
		<category domain="post_tag" nicename="preemptive-ui"><![CDATA[preemptive ui]]></category>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_published</wp:meta_key>
			<wp:meta_value><![CDATA[new]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>211</wp:comment_id>
			<wp:comment_author><![CDATA[Richard]]></wp:comment_author>
			<wp:comment_author_email>substrate9@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>109.249.216.98</wp:comment_author_IP>
			<wp:comment_date>2011-05-18 08:45:04</wp:comment_date>
			<wp:comment_date_gmt>2011-05-18 06:45:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've always wondered what we'd end up doing with all those spare CPU cores lying around - this looks like a great example of making UIs more 'intelligent'. 

If you extrapolate this out you can imagine very powerful machines pre-calculating just about every possible scenario then just waiting for the user to simply toggle whichever reality they're actually interested in.

In the meantime there's no reason we can't start to use other inputs to predict what the user will want - Kinect-based eye tracking or brain-computer interfaces as found in recent advances in neuroscience.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305701104.9869";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305742243.9405";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>212</wp:comment_id>
			<wp:comment_author><![CDATA[flashSpec]]></wp:comment_author>
			<wp:comment_author_email>volodyaputin@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>92.115.144.125</wp:comment_author_IP>
			<wp:comment_date>2011-05-18 20:31:41</wp:comment_date>
			<wp:comment_date_gmt>2011-05-18 18:31:41</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, first ideea is to use this in a picture viewer, but, when using keyboard, this technique is useless, unless using a buffer of all results that might come up next (rotate clockwise/counterclockwise, next, prev, etc.).
 Me being a flash developer requires thinking of efficient CPU usage in first place.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305743501.4255";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>213</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.97.208.108</wp:comment_author_IP>
			<wp:comment_date>2011-05-18 21:13:24</wp:comment_date>
			<wp:comment_date_gmt>2011-05-18 19:13:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, that technique is not applicable to web, brings nothing when a keyboard is used, has a big number of limitations.
But good programmers can take advantage when making desktop apps, and give a faster experience to end users. I've found it to be very useful when the application is run on a laptop and the user is using the touch pad. There is a 0.6 sec delay between the mouse enters the button area and the user manages to click it. In computer terms this is a whole eternity, a lot of trivial operations can be done in that time, enhancing the user experience. After all, it's all about the user we are trying to please.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305746004.5624";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>214</wp:comment_id>
			<wp:comment_author><![CDATA[Alladin]]></wp:comment_author>
			<wp:comment_author_email>win2003@list.ru</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.116.33.218</wp:comment_author_IP>
			<wp:comment_date>2011-05-18 21:19:17</wp:comment_date>
			<wp:comment_date_gmt>2011-05-18 19:19:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Such technique probably could be used in Wizard like GUI's, where scenarios can be defined. In this way user will feel that the program is flying :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305746357.4869";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305746392.0952";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>NextMap v0.01</title>
		<link>http://www.blog.cyberkinetx.com/2011/05/09/nextmap-v0-01/</link>
		<pubDate>Mon, 09 May 2011 08:01:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[I am a speed freak. In everything. Cars, motorcycles, computers.. you name it. Also I love the idea of creating object to object mappings without actually writing code for mapping each field from one object to another. AutoMapper does a pretty good job doing the mappings, but does not satisfy my hunger for speed.

I covered a very basic usage of AutoMapper in a previous article <a title="AutoMapper" href="http://www.blog.cyberkinetx.com/2011/02/06/automapper/">here</a>. NextMap is built with compatibility with AutoMapper in mind, so all you need to do is just change the referred assembly and the using namespace to NextMap and you are ready to compile and use the new auto mapping engine.

As for the supported features, it's just version 0.01. There is the very basic set of mappings supported, anything that can be mapped without explicit casting, Lists of Lists of Lists ... of Lists from anything that can be mapped without explicit casting... Mapping arrays of one type to another is not supported yet. But will be in v0.02 or v0.03 the latest. Mapping dictionaries is also planned for the very near future. As for the custom mappings the only supported features are rules for member mappings as Ignore() and MapFrom(). Mapping of different types are not supported: a member of type string to a member of type decimal will not succeed, there will be an exception when calling AssertConfigurationIsValid() with the message that the destination member is not mapped. If the mapping configuration for a member is done explicitly with MapFrom() and the types mapping is not supported there will be an exception.

The philosophy of NextMap is to provide safe mappings, to try to minimize developer effort and errors.

Grab an assembly of NextMap today and go change the world! <a title="NextMap v0.01" href="https://github.com/downloads/haiduc32/NextMap/NextMap_v0.01.zip">download from GitHub</a> or check the <a title="NextMap" href="https://github.com/haiduc32/NextMap">NextMap GitHub page</a>

<a title="NextMap" href="https://github.com/haiduc32/NextMap"></a>Also here is a version hosted on this domain in case you have domain restrictions <a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/05/NextMap_v0.01.zip">NextMap v0.01</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2011-05-09 10:01:00</wp:post_date>
		<wp:post_date_gmt>2011-05-09 08:01:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>nextmap-v0-01</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="auto-mapping"><![CDATA[auto mapping]]></category>
		<category domain="post_tag" nicename="automapper"><![CDATA[automapper]]></category>
		<category domain="post_tag" nicename="nextmap"><![CDATA[nextmap]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_published</wp:meta_key>
			<wp:meta_value><![CDATA[new]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sitting kills!</title>
		<link>http://www.blog.cyberkinetx.com/2011/05/11/sitting-kills/</link>
		<pubDate>Wed, 11 May 2011 07:03:32 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[I've heard before about initiatives to stop sitting at the desk. Here are some posters for a healthier way of life.
<a href="http://www.medicalbillingandcoding.org/sitting-kills"><img src="http://images.medicalbillingandcoding.org.s3.amazonaws.com/sitting-is-killing-you.jpg" alt="Sitting is Killing You" width="500"  border="0" /></a><br />Via: <a href="http://www.medicalbillingandcoding.org">Medical Billing And Coding</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2011-05-11 09:03:32</wp:post_date>
		<wp:post_date_gmt>2011-05-11 07:03:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sitting-kills</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="health"><![CDATA[health]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="work-place"><![CDATA[work place]]></category>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_published</wp:meta_key>
			<wp:meta_value><![CDATA[new]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_publish</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_networkpub_meta_content</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>209</wp:comment_id>
			<wp:comment_author><![CDATA[Mobeen Anwar]]></wp:comment_author>
			<wp:comment_author_email>mobeen.anwar@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.99.229.120</wp:comment_author_IP>
			<wp:comment_date>2011-05-13 11:07:26</wp:comment_date>
			<wp:comment_date_gmt>2011-05-13 09:07:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Well, there is the Agile way of having meetings which would help, i.e. do them standing up!

I recently got some aches and pains which I attributed to the fact that I was working from home and therefore walking less but then I got a new mattress and the pains stopped.

Maybe checking your mattress should also be on that list because you may spend 8 hours a day sitting but you also spend that amount of time sleeping!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305277646.2121";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>210</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>78.97.208.108</wp:comment_author_IP>
			<wp:comment_date>2011-05-14 01:52:36</wp:comment_date>
			<wp:comment_date_gmt>2011-05-13 23:52:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[15 min of scrum meeting a day isn't quite the idea of this post :)
and yes, good mattresses are worth the money. thinking about getting a new one myself..
but to get back to the sitting issue. as a developer i spend > 10 h a day just sitting in a chair and < 3 standing up (walking included). because i discovered i'm getting fat i stopped eating. just one meal a day to stay fit. 
some days my knees hurt real bad, that's a sign that i should walk more, at least one whole hour a day i guess.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1305330756.1233";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Podcasts</title>
		<link>http://www.blog.cyberkinetx.com/2011/05/14/podcasts/</link>
		<pubDate>Sat, 14 May 2011 18:34:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=63</guid>
		<description></description>
		<content:encoded><![CDATA[For a lot of time I've been skeptic about podcasts. I mean what are this? Some kind of radio shows except not on radio?

Today I finally gave it a try. I figured it would be nice to get some knowledge in while doing routine shopping, driving (i'll get back to this later) to the job or having my lunch. And so, I googled a bit for some technical podcasts, but finally stopped on Scot Hanselman's podcasts at <a href="http://www.hanselminutes.com">hanselminutes.com</a>, I downloaded a few and then copied to my phone. My impressions? Totally awesome! Usually I just listen to my music but that was way better, I could actually get something new and useful in the time I'd usually waste. How awesome is that?

In case you are interested what caught my attention here they are: <a href="http://www.hanselminutes.com/default.aspx?showID=185">Convention Over Configuration with Jeremy Miller</a>, <a href="http://www.hanselminutes.com/default.aspx?showID=256">Deeper into the Netduino with Chris Walker from Secret Labs</a>, <a href="http://www.hanselminutes.com/default.aspx?showID=266">From Agile Consultant to Agile Team Member with John Wilger</a>, <a href="http://www.hanselminutes.com/default.aspx?showID=234">Geek Relationship Tips with Scott's Wife</a> - now this one was really fun to listen, I just wished it could go on and one, <a href="http://www.hanselminutes.com/default.aspx?showID=187">The Art of Unit Testing with Roy Osherove</a> - actually this is the author of the The Art of Unit Testing, a book that was in my Amazon basket a while, till I replaced it with a DDD &amp; UT book, now I'm really considering buying it as well.

Before you rush to download the podcasts I must warn you of the safety risks. The podcasts are really interesting and you might get distracted from the environment surrounding you, so if you are walking take care for the semaphore lights, road crossings, bicycle lanes, etc. And I do strongly advise against listening the podcasts while driving, I found it to be VERY DISTRACTING! Remember, safety comes first.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2011-05-14 20:34:24</wp:post_date>
		<wp:post_date_gmt>2011-05-14 18:34:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>podcasts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Entity Framework, LINQ and NULLs</title>
		<link>http://www.blog.cyberkinetx.com/2011/05/28/entity-framework-linq-and-nulls/</link>
		<pubDate>Sat, 28 May 2011 20:38:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=68</guid>
		<description></description>
		<content:encoded><![CDATA[It now seems like I've been using LINQ forever, and I wouldn't give it up for anything in the world. I've grown so used to it that I miss it every time I write something in C or Java.

But I had a moment of WTF the other day when I implemented a most simple business requirement to filter the input by a field and submitted the application for testing, without bothering to check it first. (I must praise our testing team here, as we do a lot of very close collaborations. Testing features right after implementing them, fixing issues right after discovering them. Works great!)

After taking one more look at the code, I had the eureka expression, the one that I get every time that I discover something new to me but that makes absolute sense and I wander why haven't I found it earlier.

But let's go back to LINQ. Let's take a simple LINQ example:
[csharp]
class Customer
{
  public int Id { get; set; }
  public string Name { get; set; }
}

..
//somewhere in some method:
List customers = new List
{
  new Customer { Id = 10, Name = null },
  new Customer { Id = 11, Name = &quot;John&quot; },
  new Customer { Id = 12, Name = null }
};

foreach (Customer customer in customers.Where(x =&gt; x.Name != &quot;John&quot;))
{
  Console.WriteLine(customer.Id);
}
[/csharp]
How do you think, what will be outputted to the console? Yes, you are right, 10 and 12. Makes perfect sense, doesn't it?

Now let's consider the case when we have a table "Customer", with exact same structure and we created a model with that table, so we have the "Customer" entity. I want to apply the same condition, to get all customers that don't have the name John. I will just reuse the old code for now:

[csharp]
using (OurDbContext context = new OurDbContext())
{
  foreach (Customer customer in context.Customers
    .Where(x =&gt; x.Name != &quot;John&quot;))
  {
    Console.WriteLine(customer.Id);
  }
}
[/csharp]
It should output 10 and 12. At least that's what I initially thought. If you expect the same, don't worry, you're not the only one. The actual output is nothing. No id's will be outputted. If by now you ask why you missed the fact that LINQ to Entities actually generates SQL code that is executed against the database. So now you must think in terms of SQL. What will an SQL query output if you try to <strong>SELECT * FROM Customers WHERE Name != "John"</strong> supposing that we have the same data as we initialized in our list earlier? Nothing. First and third records have the Name field Null. When SQL compares a null to anything else it returns Unknown, that is <strong>false</strong>. You can compare it however you like, with == or != it will always resolve to <strong>false</strong>.

As for the correct version:
[csharp]
using (OurDbContext context = new OurDbContext())
{
  foreach (Customer customer in context.Customers
    .Where(x =&gt; x.Name != &quot;John&quot; || x.Name == Null))
  {
    Console.WriteLine(customer.Id);
  }
}
[/csharp]

Code responsibly.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>68</wp:post_id>
		<wp:post_date>2011-05-28 22:38:24</wp:post_date>
		<wp:post_date_gmt>2011-05-28 20:38:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>entity-framework-linq-and-nulls</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ef"><![CDATA[EF]]></category>
		<category domain="post_tag" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Call to writers</title>
		<link>http://www.blog.cyberkinetx.com/2011/06/06/call-to-writers/</link>
		<pubDate>Mon, 06 Jun 2011 06:54:41 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[The time has come. The time has come for you to put your hands on the keyboard and start putting down your knowledge. Yes, let your inner writer free. Amaze the world with your genius. Be a guru.

You, the person that spends the days in continuous thinking, analysis, problem solving, must have something to share with the world. The developers around the world are hungry for knowledge, are in constant search of solutions to their problems, problems that you might have solved, and are able to help. Found something useful? Share it!

Let's blog together, let's share the knowledge together. Need a place to start blogging? Why not here? Go to<a title="http://blog.cyberkinetx.com/wp-admin/" href="http://blog.cyberkinetx.com/wp-admin/"> http://blog.cyberkinetx.com/wp-admin/</a> and register, then drop a comment that you want to become a writer. That simple.

Have already a blog? Drop a link in comments and let's exchange links.

Make the world a better place for developers!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2011-06-06 08:54:41</wp:post_date>
		<wp:post_date_gmt>2011-06-06 06:54:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>call-to-writers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Prices On .Net Project</title>
		<link>http://www.blog.cyberkinetx.com/2011/07/31/prices-on-net-project/</link>
		<pubDate>Sun, 31 Jul 2011 15:37:44 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=73</guid>
		<description></description>
		<content:encoded><![CDATA[Now this post is about an older project of mine (and by old I mean a couple of months). I had trouble with it's hosting and was delaying it's public announcement.

The idea behind Prices On .Net is simple, you are interested in buying something online that is expensive and want to wait till the price drops, you enter on <a title="http://priceson.net" href="http://priceson.net">http://priceson.net</a>, register the link and when the price does drop you get a notification email. (If anybody knows a free SMS service please drop a comment). Any link to any web site can be added. On the admin area there is a very spartan interface for adding configurations for new web sites when links to unsupported web sites are added (sorry, you are not allowed there :).

I just needed a simple way to keep an eye on some SSDs I was interested on, also some android phones, a couple of amazon books. So I decided to build a simple tool to do the monitoring, but then I figured more people might be interested in a such a service, and so the web site was born.

As simple is the idea as simple is the web site. Nothing fancy, minimalist style. Please, leave a comment if you have any suggestions.

P. S. And while you're at it, don't forget to give it a Recommend on facebook (on the bottom of the page) ;)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2011-07-31 17:37:44</wp:post_date>
		<wp:post_date_gmt>2011-07-31 15:37:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>prices-on-net-project</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="price-tracking"><![CDATA[price tracking]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Entity Framework and Oracle Boolean</title>
		<link>http://www.blog.cyberkinetx.com/2011/08/18/entity-framework-and-oracle-boolean/</link>
		<pubDate>Thu, 18 Aug 2011 20:29:25 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=75</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Problems with Legacy Systems</h4>
Nobody likes working with legacy systems. You have so many constraints that all the fun goes away. The main concern is how not to break something that works.

So here I am working on a software application that depends on a legacy Oracle DB, with conventions for creating new DBs that don't really mix well with Entity Framework. One of the very first frustrations was the way boolean values were stored, with a varchar of 'Y' or 'N'. You don't expect Entity Framework to figure it out for you. In order to support Oracle DBs we used dotConnect which comes with it's one designer called Entity Developer, but it can map boolean values only to numeric fields of size 1.

When we had to make a query it would look like that:

[csharp]IEnumerable&lt;Product&gt; onSaleProducts =
    repository.Products.Where(x =&gt; x.OnSale == OracleBool.Yes);[/csharp]

Also, there is a need for conversion when you need to use the field in conditions to compare with other variables, when getting the values as parameter to a method, when sending the value to another method as parameter, etc. It's not the end of the world, but it's definitively a thing that would stress any self respecting developer.
<h4>In search of a solution</h4>
From the start of the project I've set myself a goal to figure out how to map the 'Y' and 'N' to boolean true and false in our entities. Because we are using POCO I thought all I needed was the support of attributes in the EF designer, so I could manipulate how the POCO objects where generated. Whell, it was eventually supported in a later version of Entity Developer, but it proved not near to enough.

I've spent a lot of hours trying to get a working solution, tried many approaches, and I finally got it. The final missing piece was inspired from the Davy Landman plog post <a title="Adding support for enum properties on your entities in Entity Framework" href="http://landman-code.blogspot.com/2010/08/adding-support-for-enum-properties-on.html" target="_blank">Adding support for enum properties on your entities in Entity Framework</a>. It took some magic with operators and expression trees to get it all rolling.
<h4>The solution</h4>
The solution is a set of classes that you must copy to your project, creating a complex type from EF designer (default one in Visual Studio is just fine) with a partial class that is found in the provided zip, and finally wrapping the ObjectSet which can be done in multiple ways.

First of all download all the required classes: <a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/EFExtensions.zip">EFExtensions</a>. The four classes: ObjectQueryWrapperProvider.cs, WrappedFieldsObjectQuery.cs, WrappedFieldsObjectSet.cs, WrappedFieldsTranslator.cs; should be copied to the project where the Entity Framework Context is defined. The DbBool.Partial.cs we'll need later.

Go to the EF designer, right click on the property that is string but you want to be as boolean, click 'Refactor into New Complex Type', rename it back to the original name. From the Model Browser rename the new type as DbBool. The single property, inside, rename to Value. Consider this all as conventions.

Now that you have the new DbBool class generated in your solution explorer, copy the DbBool.Partial.cs where the DbBool.cs was generated, and correct it's namespace.

You're almost there. All you have to do is wrap the ObjectSet. There are more ways to do it. If you have some kind of repository, or DAL that wraps the EF context you can do it there with something like:

[csharp]
IEnumerable&lt;Product&gt; GetOnSaleProducts()
{
    using (DbContext context = new DbContext())
    {
        return (new WrappedFieldsObjectSet&lt;User&gt;(context.Products))
            .Where(x =&gt; x.OnSale == OracleBool.Yes).ToList();
    }
}
[/csharp]

If you are using POCO, and have a template for that, you can tweak the template to automatically wrap your ObjectSet for each type. Something like:

[csharp]
public WrappedFieldsObjectSet&lt;Product&gt; Products
{
    get { return _products?? (_products = new WrappedFieldsObjectSet&lt;Product&gt;(CreateObjectSet&lt;Product&gt;(&quot;Products&quot;))); }
}
private WrappedFieldsObjectSet&lt;Product&gt; _products;
[/csharp]

That way the wrapping is done transparently and you can enjoy writing queries like:

[csharp]
IEnumerable&lt;Product&gt; onSaleProducts =
    repository.Products.Where(x =&gt; x.OnSale);
[/csharp]

One 'little' inconvenience is when you have to transform a property from string to DbBool complex type. There seems to be no direct way to do it in the designer. The steps you have to take are: in EF designer rename the property into something else, so you can add another property with the desired name. Add a complex type property with the old name of the property you just renamed. Check that the type of the complex property is DbBool. Right click on the entity in designer, and select 'Table Mapping'. Remap the the field to the new property. Delete the old property. A bit cumbersome, but the benefits of using the property as boolean will pay off.
<h4>Extra bonus</h4>
Here are the steps to tweaking the default POCO template to automatically wrap the ObjectSets. In the ***.Context.tt find:

[csharp]
using System;
using System.Data.Objects;
using System.Data.EntityClient;
[/csharp]

And add <strong>using EFExtensions;</strong>. Next, replace:

[csharp]
    &lt;#=Accessibility.ForReadOnlyProperty(entitySet)#&gt; ObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt; &lt;#=code.Escape(entitySet)#&gt;
    {
        get { return &lt;#=code.FieldName(entitySet) #&gt;  ?? (&lt;#=code.FieldName(entitySet)#&gt; = CreateObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt;(&quot;&lt;#=entitySet.Name#&gt;&quot;)); }
    }
    private ObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt; &lt;#=code.FieldName(entitySet)#&gt;;
[/csharp]

With:

[csharp]
    &lt;#=Accessibility.ForReadOnlyProperty(entitySet)#&gt; WrappedFieldsObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt; &lt;#=code.Escape(entitySet)#&gt;
    {
        get { return &lt;#=code.FieldName(entitySet) #&gt;  ?? (&lt;#=code.FieldName(entitySet)#&gt; = new WrappedFieldsObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt;(CreateObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt;(&quot;&lt;#=entitySet.Name#&gt;&quot;))); }
    }
    private WrappedFieldsObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt; &lt;#=code.FieldName(entitySet)#&gt;;
[/csharp]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2011-08-18 22:29:25</wp:post_date>
		<wp:post_date_gmt>2011-08-18 20:29:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>entity-framework-and-oracle-boolean</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="category" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Entity Framework and enums aka EFExtensions</title>
		<link>http://www.blog.cyberkinetx.com/2011/08/21/entity-framework-and-enums-aka-efextensions/</link>
		<pubDate>Sun, 21 Aug 2011 20:33:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[<a style="display: none;" href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=haiduc32" rel="tag">CodeProject</a>How would you like to write that:

[csharp]
User foundUser = context.Users.FirstOrDefault(x =&gt;
    x.Username == &quot;OneUsername&quot; &amp;&amp;
    x.CountryCode == CountryCodeEnum.UK &amp;&amp;
    x.AccessLevel == AccessLevelEnum.Admin &amp;&amp;
    x.Active);
[/csharp]

When CountryCode is of type string, AccessLevel is an int and Active is string that can be "Y" or "N".

<!--more-->

Here 2 important demonstrations are done. First it's the support of enums, that can be of numeric value or string value. Second, support for non orthodox booleans of "Y" and "N" that can be found in Oracle databases.
<h3>Behind the scene</h3>
If you aren't really interested in how it became possible to do that you can skip to the Prerequisites.

In my previous post I described how to add support for custom booleans, like "Y" and "N", but I didn't really explain how it works behind the scene.

For each property that we want to have a custom mapping we create a complex type, the property becoming a complex property. The single property of the new complex type must be renamed to Value, as a convention so we can create templates for it and find it easily with reflection (call it hard coding if you will).

The POCO template is adjusted to insert custom code in the generated class for the complex type. The code deals with implicit casting to enums, operators that do comparison between the complex type and enums, overridden methods from object class, helper method, etc. The template checks for attributes set on the complex type from the Entity Developer.

For custom boolean mapping, the POCO template is adjusted to check for DbBool name for complex types, so no need for extra attributes here.

And the most important, the ObjectSet&lt;&gt; is wrapped with an ObjectSetWrapper, that will replace in the expression trees, the members properties that use directly the complex type with the actual Value property like: x.CountryCode =&gt; x.CountryCode.Value. For boolean it will be: x.Active =&gt; x.Active.Value == "Y".

There is also an EnumMapper that can handle the transformation between an enum and the value that will be replaced in the expression tree. In order to support string values I've created a new attribute that is used on enums:

[csharp]
public enum CountryCodeEnum
{
    [EnumValue(Value = &quot;US&quot;)]
    USA,
    [EnumValue(Value = &quot;UK&quot;)]
    UK
}
[/csharp]

The EnumMapper will check for the attribute when mapping the enums to values, and will set string value when the attribute is found, or numeric value if there is no attribute.

I hope that covers all the important aspects.
<h3>Prerequisites</h3>
Unfortunately I couldn't find any way to do it elegantly with the default EF designer, so I went with Entity Developer, from <a title="Devart" href="http://devart.com" target="_blank">devart.com</a>. It also comes  bundled with their dotConnect product, an ADO.NET provider for a variety of databases. I used it for it's support of attributes in the model. There is a free version for MSSQL, but it has a limitation on the number of entities you can import. I suggest you start creating your model with Entity Developer from the start, as I found some compatibility issues when opening a model created with default Entity Framework designer.

Second prerequisite, you must use POCO objects generated with Visual Studio default T4 templates. Otherwise (for instance if you're using the templates found in Entity Developer).. it's on you to tweak the provided include template included with EFExtensions.

Third, download the latest version of EFExtensions library from github <a href="https://github.com/haiduc32/EFExtensions" target="_blank">here</a>.
<h3>Getting dirty</h3>
We got all we need, so let's get to work. First of all import the downloaded EFExtensions library into the project where you model is defined. Or you can get the project sources, if you intend on tweaking it, and referencing it instead.

Open your model in Entity Developer. Go to Model -&gt; Settings. On the left side there is a tree navigation, select Attributes. Now click on Add.. and find the EFExtensions assembly (if you chose to use the project with sources search for it in your bin\debug dirrectory). Once you found it, hit OK. Uncheck the EFExtensions.EnumValueAttribute as you don't need it. You should see something like this:

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/attr1.png"><img class="alignnone size-full wp-image-79" title="Attributes list" src="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/attr1.png" alt="" width="463" height="302" /></a>

Next go to a property that you want to support enums. Right click, select Migrate.., the default selection in the new window will be New complex type, that's just what we need. Enter a name, I'd suggest setting a convention to name all complex types that are to support enums to "Db&lt;Name&gt;Enum".

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex1.png"><img class="alignnone size-full wp-image-80" title="Adding a complex type" src="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex1.png" alt="" width="477" height="377" /></a>

Once you hit OK the property will be renamed to the name of the complex type, you don't need that so rename it back. In the Model Explorer under Complex Types find the type you just created and change the name it's single property to Value, consider that a convention. For me it looks like:

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex2.png"><img class="alignnone size-full wp-image-81" title="Value property name" src="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex2.png" alt="" width="239" height="319" /></a>

Select the complex type and under Properties panel find the Attributes property. Select it and click the small button on the right side of (Collection), in the new window select the DbEnumAttribute and click on the arrow button that points to the right, so it will be added in the list of Selected Attributes. Now in the Properties list, set the full name(including the full namespace) for the Target Enum Type. This is the enum that you want to support for your complex property. In my example it is Experimental.CountryCodeEnum. In the image you can see arrows where you have to action.

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex3.png"><img class="alignnone size-full wp-image-82" title="Setting attributes" src="http://www.blog.cyberkinetx.com/wp-content/uploads/2011/08/complex3.png" alt="" width="466" height="198" /></a>

Once you click OK you can move to the next property that you want to support enums or custom boolean.

To map a property to custom boolean that is mapped to Y and N all you have to do is create a complex type with the name of DbBool, with a single property named also Value. No need to add attributes here.

If you need to map more fields in your entities to the same complex type select Migrate... and then select Existing complex type.
<h3>Getting even dirtier</h3>
Changing the model to support enums is all very nice but you can finish that later. Now we have to get real dirty with the T4 template to generate correctly the code for our complex types and also to automatically wrap the ObjectSets. As mentioned in the Prerequisites section, support is provided for default POCO template that you can find in Visual Studio. For support with other templates you might need to get into the EFExtensions.ttinclude and adapt it.

In the folder with EFExtensions find EFExtensions.ttinclude file and copy it to your directory with the POCO templates. You don't have to include it in the poject, just let it be in the same folder. If that doesn't work for you, try moving it to the base folder of the project.

With default POCO templates you have 2 .tt files, one ending with .Context.tt. Open that one and find:

[csharp]
using System;
using System.Data.Objects;
using System.Data.EntityClient;
[/csharp]

Add <strong>using EFExtensions;</strong>. Next, replace:

[csharp]
&lt;#=Accessibility.ForReadOnlyProperty(entitySet)#&gt; ObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt; &lt;#=code.Escape(entitySet)#&gt;
{
    get { return &lt;#=code.FieldName(entitySet) #&gt;  ?? (&lt;#=code.FieldName(entitySet)#&gt; = CreateObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt;(&quot;&lt;#=entitySet.Name#&gt;&quot;)); }
}
private ObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt; &lt;#=code.FieldName(entitySet)#&gt;;
[/csharp]

With:

[csharp]
&lt;#=Accessibility.ForReadOnlyProperty(entitySet)#&gt; ObjectSetWrapper&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt; &lt;#=code.Escape(entitySet)#&gt;
{
    get { return &lt;#=code.FieldName(entitySet) #&gt;  ?? (&lt;#=code.FieldName(entitySet)#&gt; = new ObjectSetWrapper&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt;(CreateObjectSet&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt;(&quot;&lt;#=entitySet.Name#&gt;&quot;))); }
}
private ObjectSetWrapper&lt;&lt;#=code.Escape(entitySet.ElementType)#&gt;&gt; &lt;#=code.FieldName(entitySet)#&gt;;
[/csharp]

Now open the other one. At the very top find:

[csharp]
&lt;#@ template language=&quot;C#&quot; debug=&quot;false&quot; hostspecific=&quot;true&quot;#&gt;
&lt;#@ include file=&quot;EF.Utility.CS.ttinclude&quot;#&gt;&lt;#@
[/csharp]

Add the EFExtensions.ttinclude:

[csharp]
&lt;#@ template language=&quot;C#&quot; debug=&quot;false&quot; hostspecific=&quot;true&quot;#&gt;
&lt;#@ include file=&quot;EF.Utility.CS.ttinclude&quot;#&gt;
&lt;#@ include file=&quot;EFExtensions.ttinclude&quot;#&gt;&lt;#@
[/csharp]

Find the line that writes the class name for complex types:

[csharp]
&lt;#=Accessibility.ForType(complex)#&gt; partial class &lt;#=code.Escape(complex)#&gt;
[/csharp]

Add the code to insert interface if the complex type has the attribute DbEnumAttribute:

[csharp]
&lt;#=Accessibility.ForType(complex)#&gt; partial class &lt;#=code.Escape(complex)#&gt; &lt;#=CheckDbEnum(complex) ? &quot;: &quot; + GetDbEnumInterface(complex) : &quot;&quot;#&gt;
[/csharp]

Now scroll down and find the line that has region.End(); and after that EndNamespace(namespaceName); Something like:

[csharp]
    region.End();
#&gt;
}
&lt;#
    EndNamespace(namespaceName);
}
[/csharp]

Insert WriteDbBoolSupport(complex); and WriteEnumSupport(complex); right after region.End();

[csharp]
    region.End();

    WriteDbBoolSupport(complex);
    WriteEnumSupport(complex);
#&gt;
}
&lt;#
    EndNamespace(namespaceName);
}
[/csharp]

This is where the extra code will be inserted. You can save and close the file now.
<h3>Almost there</h3>
So the complex types are created, the custom code is being generated.. what else? Ah, yes, when you want to use a string value for an enum, like I did for CountryCodeEnum, UK corresponds to "UK", USA to "US", so it's not a ToString() mapping. In order to have this string values add on each enum constant the EnumValueAttribute(Value = "whatever value you want"). Let's review my previous example:

[csharp]
public enum CountryCodeEnum
{
    [EnumValue(Value = &quot;US&quot;)]
    USA,
    [EnumValue(Value = &quot;UK&quot;)]
    UK
}
[/csharp]

If the attribute is not set the value will be same as doing a (int)CountryCodeEnum.USA.

Don't forget to add a reference to EFExtensions if you have your enums in another project.
<h3>Let's talk about usage</h3>
Now that my User entity has complex properties that can be assigned and compared to enums, or booleans what can I do what is not possible out of the box with Entity Framework?

Whell how about that:

[code]
User newUser = new User
{
    Active = true,
    CountryCode = CountryCodeEnum.UK,
    Username = &quot;OneUsername&quot;,
    AccessLevel = AccessLevelEnum.User
}
[/code]

You've seen how CountryCodeEnum looks like, now the AccessLevelEnum:

[csharp]
public enum AccessLevelEnum
{
    Deny = 0,
    User = 1,
    Admin = 99
}
[/csharp]

Let's get all inactive users:

[csharp]
IEnumerable inactiveUsers = context.Users.Where(x =&gt; !x.Active);
[/csharp]

Or.. All users from UK:

[csharp]
IEnumerable inactiveUsers = context.Users
    .Where(x =&gt; x.CountryCode == CountryCodeEnum.UK);
[/csharp]

And also I can compare it with a string value:

[csharp]
IEnumerable inactiveUsers = context.Users
    .Where(x =&gt; x.CountryCode.Value == &quot;UK&quot;);
[/csharp]
<h3>Afterword</h3>
Congratulations, now you know how to use enums with LINQ to Entities.

Also I'd like to mention the post by Davy Landman that helped me find the missing piece for my solution: <a title="Adding support for enum properties on your entities in Entity Framework" href="http://landman-code.blogspot.com/2010/08/adding-support-for-enum-properties-on.html" target="_blank">Adding support for enum properties on your entities in Entity Framework</a>. But unfortunately the presented solution supports only enums of numeric type.

If you find any bugs, or want to improve the solution you can do that on github, contributions are appreciated.

All that being said, have fun!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2011-08-21 22:33:53</wp:post_date>
		<wp:post_date_gmt>2011-08-21 20:33:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>entity-framework-and-enums-aka-efextensions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ef"><![CDATA[EF]]></category>
		<category domain="post_tag" nicename="efexensions"><![CDATA[EFExensions]]></category>
		<category domain="post_tag" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="category" nicename="entity-framework"><![CDATA[Entity Framework]]></category>
		<category domain="post_tag" nicename="linq"><![CDATA[LINQ]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IoC and circular references</title>
		<link>http://www.blog.cyberkinetx.com/2011/08/29/ioc-and-circular-references/</link>
		<pubDate>Mon, 29 Aug 2011 18:44:05 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[We rarely learn from our mistakes, or from the mistakes of our predecessors. This article is about what you shouldn't do, but if you still did it how to mess it right.

My story is about a project where the developers decided to use Inversion of Control (I'll use IoC from here on) in order to be able to simplify Unit Testing of their classes. Most of this classes where in the business layer. But as the time went by the classes would multiply and grow bigger and bigger, and some classes would require references to other classes, other classes to another other classes, and the last will end up trying to reference the first.. with no luck. IoC framework said "enough is enough" and threw a nasty exception.

Then, some developers scratched their heads, and decided to try and refactor. They went and extracted the methods that were generating the circular reference into separate classes, and for the moment everybody was happy.

But as the time went by even further, the references got tangled even more, and not even the bravest developers adventured to untangle them. Developers also realized that too many instances were being created because of the IoC that was injecting all references into the constructor, so each time a class was instantiated, all it's references were instantiated as well, along with all of their references, and so on, and so on.. And all they needed at a time was just a few of them..

"So what to do?" they said.

But the answer was pretty simple, lazy loading. Protected properties will do the trick. Also helps with Unit Testing, as a mock/stub object can be set. Generic code, should work with most of IoC frameworks:

[csharp]
protected ISomeComponent SomeComponent
{
    get
    {
        if (_someComponent == null)
        {
            _someComponent = IoCContainer.Resolve&lt;ISomeComponent&gt;();
        }
        return _someComponent;
    }
    set { _someComponent = value; }
}
private ISomeComponent _someComponent;
[/csharp]

The property is not public because some IoC frameworks will try and inject an instance to the property if they have a config for the interface.

In the constructor parameters only references that are always used should be kept, like the repository.

It's a bit weird to have classes that in the end reference each other. No sane compiler in the world would let you build such sources, but with IoC it's a very simple thing to do. A part of me is almost ready to advocate for circular references as something natural for service classes. You might find yourself in the situation when you have two classes that want to use methods from each other. Any sane person at this moment will say that the classes must be refactored, to extract the common methods into a separate class. But what if that is just another way to do it? What if..

Keeping this post short, use IoC responsibly (let's not forget about the huge config you have to do for all the classes that must be injected). Group  your service classes into a hierarchy so you know who can reference who, and no horizontal references.  If you do decide to go berserk and mess up all the references, and you survive that adventure, please let me know.

Code responsibly.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2011-08-29 20:44:05</wp:post_date>
		<wp:post_date_gmt>2011-08-29 18:44:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ioc-and-circular-references</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="inversion-of-control"><![CDATA[Inversion of Control]]></category>
		<category domain="post_tag" nicename="ioc"><![CDATA[IoC]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>223</wp:comment_id>
			<wp:comment_author><![CDATA[AlexanderMP]]></wp:comment_author>
			<wp:comment_author_email>admin@alexandermp.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.28.50.132</wp:comment_author_IP>
			<wp:comment_date>2011-08-30 08:54:27</wp:comment_date>
			<wp:comment_date_gmt>2011-08-30 06:54:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The fact that it finally works doesn't mean that is's programmed logically correct. Circular references are a definite no-no.
In case an object of ClassA wants to instantiate an object of ClassB, and call B.Foo() which in turn calls A.Bar(), a simple and correct solution would be for ClassB to define the delegates of the methods it will eventually call from its creator. When A creates B, it should give values to those delegates.

Circular reference is like a mess in a company. It's when you as a boss tell your employee to do something, then feel relieved that you had assigned a task, when all of a sudden, that employee starts telling you what to do, when all you have to worry about is assigning tasks and organizing workflow.

I actually had a project with circular references which compiled. Do you imagine? Project A was referencing Project B, and vice-versa. It compiled. Of course it didn't compile any more after a Clean/Build. Circular references are EVIL which must be avoided at all cost. I refused to do mock data classes because of this. I'd rather not commit transactions to the DB :).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314687267.3862";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>224</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.126.146.3</wp:comment_author_IP>
			<wp:comment_date>2011-08-30 10:12:16</wp:comment_date>
			<wp:comment_date_gmt>2011-08-30 08:12:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I totally agree that this is a no-no. That's why I ended my post by recommending not to do it. But as a theoretician it does intrigue me, and I will sure explore this anti-pattern in some future post.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>223</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1314691936.6964";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>C# brain teasers</title>
		<link>http://www.blog.cyberkinetx.com/2011/09/04/c-brain-teasers/</link>
		<pubDate>Sun, 04 Sep 2011 15:58:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=89</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I've stumbled upon a few brain teasers on C# and it was fun trying to figure out the answers to the problems. So here are a few simple brain teasers from me.
<h3>Teaser 1</h3>
What will be displayed in the console?

[code]
void foo(int a, int b, int c)
{
    Console.WriteLine(a);
    Console.WriteLine(b);
    Console.WriteLine(c);
}

.....

int i = 0;

foo(i++, i++, i++);
[/code]
<h3>Teaser 2</h3>
Will that compile?

[code]
enum E { A, B, C, }
[/code]

<h3>Teaser 3</h3>

How about that:

[code]
void foo(string s) {...}

void foo(StringBuilder sb) {...}

....

foo(null);
[/code]

No answers provided. You want to know the answers, you have to try it yourself, no fun otherwise.

More teasers <a href="http://www.yoda.arachsys.com/csharp/teasers.html" target="_blank">here</a> and <a href="http://www.ahuwanya.net/blog/post/C-Brainteasers-Part-I.aspx" target="_blank">here</a>. Got a brain teaser? Drop a comment.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2011-09-04 17:58:07</wp:post_date>
		<wp:post_date_gmt>2011-09-04 15:58:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-brain-teasers</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brain-teaser"><![CDATA[brain teaser]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[c#]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>229</wp:comment_id>
			<wp:comment_author><![CDATA[AlexanderMP]]></wp:comment_author>
			<wp:comment_author_email>pisarenco.a@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.180.68.27</wp:comment_author_IP>
			<wp:comment_date>2011-09-05 14:01:33</wp:comment_date>
			<wp:comment_date_gmt>2011-09-05 12:01:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[csharp]
public partial class MyClass
{
    IEnumerable Power(int number, int exponent)
    {
        int counter = 0;
        int result = 1;
        while (counter++ &lt; exponent)
        {
            result = result * number;
            Console.Write(&quot;x &quot;);
            yield return result;
        }
    }
}
public partial class MyClass
{
    public void foo()
    {
        foreach (int i in Power(2, 4))
        {
            Console.Write(&quot;{0}&quot;, i);
        }
    }
}
[/csharp]

what will foo() display?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315224094.0746";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1315297873.8135";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Rock Stars, Ninjas and Heroes</title>
		<link>http://www.blog.cyberkinetx.com/2011/11/06/rock-stars-ninjas-and-heroes/</link>
		<pubDate>Sun, 06 Nov 2011 19:39:42 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[What this 3 have in common? Sometimes they are used to describe programmers. What follows is a characterization of each type.
<h4>Rock Star</h4>
This is the most used term out of the 3. You might even seen it in job offers ads like: "Are you a Rock Star programmer? We want you in our team... bla bla bla".

First of all that means a person that is very good, one of the best at what it's doing (programming in our case), but it also describes it's character. It's all about him. The world revolves around him. All the others are not worthy of his attention. He is the God, as he can create what no other can. So not a team player.
<h4>Ninja</h4>
The masters in their craft, the warriors that know their weapons, and handle them like no other. Can do things faster then anybody else because they know the secret shortcuts to get a job done. Google is their best friend. Why invent new solutions when so many problems have already been solved? They will be able to reuse code and modules that the society has produced.

<h4>Hero</h4>

Doesn't refer to one's technical side. For a hero it's all about getting it done. If there is a problem with the delivery of the product, the hero will step up and put everything he's got to solving the problems and delivering the project on time. Yes, that means working late hours. Just as real heroes (not comic book ones) they burn out eventually.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2011-11-06 21:39:42</wp:post_date>
		<wp:post_date_gmt>2011-11-06 19:39:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rock-stars-ninjas-and-heroes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Netduino - hello led!</title>
		<link>http://www.blog.cyberkinetx.com/2011/11/09/netduino-hello-led/</link>
		<pubDate>Wed, 09 Nov 2011 19:42:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[Are you a .Net developer but you also dream of doing some electronic projects, like.. blinking leds? There is a app.. err.. board, for that. Netduino is the name.

<img class="alignnone" title="netduino" src="http://netduino.com/images/hardware/netduino/photo_overhead.gif" alt="" width="359" height="270" />

I'll go on with a short description of what is it. Netduino is a small board, with a form factors same as Arduino, a very popular prototyping board. Netduino is easy to connect to the computer with a usb cable, all written software is deployed with a simple run button click. The software is written in C#, with the the .Net 4.1 Micro Framework. The new version of the Micro Framework, 4.2, has support for VB.

As for electronic features, it has 14 general purpose input-output ports. Connect LEDs to them and make them blink, or control the garage gates if you like.. 6 analog ports are handy if you want to hook up a temperature sensor, or any other thing that has an analog output. It can handle UART, SPI or I2C interfaces so you can add any other piece of electronics that needs a communication interface. Controling servo motors is easy as well with PWM.

Thirst thing I did when I got it was blinking 2 leds, the code is as follows (one is an onboard led another one I hooked to GPIO13):

[csharp]
using System;
using System.Threading;
using Microsoft.SPOT;
using Microsoft.SPOT.Hardware;
using SecretLabs.NETMF.Hardware;
using SecretLabs.NETMF.Hardware.Netduino;

namespace NetduinoApplication1
{
  public class Program
  {
    public static void Main()
    {
      OutputPort ledBlue = new OutputPort(Pins.ONBOARD_LED,
        false);
      OutputPort ledRed = new OutputPort(Pins.GPIO_PIN_D13,
        false);
      const int colorBlinkCount = 4;
      const int colorTime = 50; //ms

      while (true)
      {
        for (int i = 0; i &lt; colorBlinkCount; i++)
        {
          ledBlue.Write(true);
          Thread.Sleep(colorTime);
          ledBlue.Write(false);
          Thread.Sleep(colorTime);
        }

        for (int i = 0; i &lt; colorBlinkCount; i++)
        {
          ledRed.Write(true);
          Thread.Sleep(colorTime);
          ledRed.Write(false);
          Thread.Sleep(colorTime);
        }
      }
    }

  }
}
[/csharp]

And the web site <a href="http://www.netduino.com/">netduino.com</a>. A place where you can buy it with reasonable shipment price <a title="sparkfun.com" href="http://www.sparkfun.com/search/results?term=netduino&amp;what=products">sparkfun.com</a>. As you can see on the latest link, it comes in 3 flavors, the mini, the standard and pro with network capability.

.Net FTW!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2011-11-09 21:42:24</wp:post_date>
		<wp:post_date_gmt>2011-11-09 19:42:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>netduino-hello-led</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="electronic"><![CDATA[electronic]]></category>
		<category domain="post_tag" nicename="led"><![CDATA[led]]></category>
		<category domain="post_tag" nicename="netduino"><![CDATA[netduino]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>268</wp:comment_id>
			<wp:comment_author><![CDATA[necuvânt]]></wp:comment_author>
			<wp:comment_author_email>just1dreamer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.24.127.253</wp:comment_author_IP>
			<wp:comment_date>2011-11-09 23:38:10</wp:comment_date>
			<wp:comment_date_gmt>2011-11-09 21:38:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[At last! 
It seems like fun...Honestly!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320874691.0237";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1320894210.2628";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Indentation: tabs or spaces?</title>
		<link>http://www.blog.cyberkinetx.com/2012/02/06/indentation-tabs-or-spaces/</link>
		<pubDate>Mon, 06 Feb 2012 14:45:32 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[If you still prefer the spaces for identation, or haven't decided yet, here is a post that I totally support (well.. almost totally), that should convince you as well that tabs are best for indentation <a title="Why tabs are clearly superior" href="http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/">http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2012-02-06 16:45:32</wp:post_date>
		<wp:post_date_gmt>2012-02-06 14:45:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>indentation-tabs-or-spaces</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>330</wp:comment_id>
			<wp:comment_author><![CDATA[necuvânt]]></wp:comment_author>
			<wp:comment_author_email>just1dreamer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.24.106.18</wp:comment_author_IP>
			<wp:comment_date>2012-02-09 21:54:22</wp:comment_date>
			<wp:comment_date_gmt>2012-02-09 19:54:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[and where is the post? :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1328817262.8172";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>333</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>194.126.146.3</wp:comment_author_IP>
			<wp:comment_date>2012-02-10 09:26:32</wp:comment_date>
			<wp:comment_date_gmt>2012-02-10 07:26:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[that might have been a bug in WordPress :) updated now. feedback?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>330</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1328858792.606";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>346</wp:comment_id>
			<wp:comment_author><![CDATA[necuvânt]]></wp:comment_author>
			<wp:comment_author_email>just1dreamer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.24.111.30</wp:comment_author_IP>
			<wp:comment_date>2012-02-12 23:08:34</wp:comment_date>
			<wp:comment_date_gmt>2012-02-12 21:08:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I wrote a detailed explanation on how I ideally see things, but I deleted it. Because I realized that I haven't really played with indent settings. What can I say...that was some nice theory. 
In my case, the winning argument was that tabs equal less keystrokes, at the same time allowing individuals to use their own preferences without messing it for the others working on the same code file. Flexibility - that's something I like. Consistency is another thing. Both spaces and tabs are fine as long as you keep the same settings throughout the project. Cause when you don't, things start to get weird; and the reason invoked here - feeling comfortable, hence more efficient, begins to fade. 
So, try editing the files with different tab settings and see how transparent is that for you. I had different expectations after all the literature I've read on the subject, but the actual experience was really annoying. And it's so painful to accidentally reformat everything. Or maybe I'm just doing it wrong...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1329080915.0729";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>MaKey MaKey - how to fund a nice idea?</title>
		<link>http://www.blog.cyberkinetx.com/2012/05/27/makey-makey-how-to-fund-a-nice-idea/</link>
		<pubDate>Sun, 27 May 2012 13:09:10 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=113</guid>
		<description></description>
		<content:encoded><![CDATA[I just love the american spirit of.. should i call it enterprenorism?
How americans do it:
<blockquote>- Dad, i have this great idea of making a web site where you could sell stuff that you don't need.
- That's great son, let's do it!</blockquote>
How eastern europeans do it:
<blockquote>- Dad, look at this awesome game I wrote for my phone!
- Stop fooling arround and do your homework!</blockquote>
And this is a big demotivator, and a cultural phenomenon that sets back a lot of briliant minds.

Following this demotivator will follow another one (for the non USA residents). There is this awesome site <a title="kickstarter.com" href="http://www.kickstarter.com" target="_blank">kickstarter.com</a>, which basicly.. helps you lounch your projects by means of croudfunding - it means, you show the world what you want to build, and if you manage to catch the crowd's attention they will pledge to fund your start up, of course in return of getting a copy of your product, or whatever you promise for their money. But you can do it only if you're an american. (anybody interested in building an european version?)

The latest project that caught my attention by it's semplicity and ingenuity is the<a title="MaKey MaKey" href="http://www.kickstarter.com/projects/joylabs/makey-makey-an-invention-kit-for-everyone" target="_blank"> MaKey MaKey</a>. I don't know how to put it simple.. It's a capacitive interface that you can connect by usb to your computer. it has 6 inputs that you can connect to about anything you want, and it will transform into a button. Check the kickstarter page and the video to get a better understanding.

The part that strikes me is that they needed a 25k$ funding for starting the project, but by the time this post is being written, they have about 250k$!.. and counting!..
So all this being said, get your mechanical pencil and a nice notebook and start laying out ideas. The next big thing is somewhere there.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2012-05-27 15:09:10</wp:post_date>
		<wp:post_date_gmt>2012-05-27 13:09:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>makey-makey-how-to-fund-a-nice-idea</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TypeMatrix 2030 Keyboard Review</title>
		<link>http://www.blog.cyberkinetx.com/2012/06/09/typematrix-2020-review/</link>
		<pubDate>Sat, 09 Jun 2012 10:48:23 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to do a TypeMatrix review for a very long time but never got to it, and today I decided it was finally the time.

So what is TypeMatrix 2030? It's a keyboard. Not just any keyboard, it's a very unique one. Designed with ergonomics in mind (not in the usual way the Ergonomic word is used for keyboards). But I really don't know how to put it in words, so here is a photo of my TypeMatrix keyboard:

<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/DSC_1944.jpg"><img class="alignnone  wp-image-116" title="TypeMatrix 2020" src="http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/DSC_1944.jpg" alt="" width="479" height="317" /></a>

<!--more-->Not much to see.. I ordered mine in clear white, more hacker style. Here is the <a title="TypeMatrix 2020 features" href="http://www.typematrix.com/2030/features.php" target="_blank">link </a>to the official site, you'll land directly on the photo with all the button functions.

I was searching for a more programmer-friendly keyboard, seen dozens of futuristic keyboards, but none that would really help in my day to day work. Actually my main pain were the navigation keys, that I use pretty often while working with the Visual Studio, and each time I had to move my hand, find the navigation keys, and then come back to the default hand position. Initially I was thinking about an ergonomic keyboard that had some navigation buttons in the middle, but all I could find did not really tempt me.

So why TypeMatrix? It was love at first sight. An unconventional keyboard. Not too futuristic. The navigation buttons where under the right hand (J N M &lt;), activated by the function key. It was even more than I hoped for. The Del, Backspace and Enter buttons in the middle so I could use them with both hands (useful when you use the mouse with your right hand and delete portion of the text, don't need to move the left hand across the keyboard. The keyboard is smaller than a normal one, the keys being the same size (actually, when I write on a normal keyboard I feel like the keys are smaller, but that is because on TypeMatrix the hands are father apart, and gives you a sensation of freedom). Here is a comparison of the TypeMatrix 2030 to the Logitech K350, the keyboard that I use at home.<a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/DSC_1945.jpg"><img class="alignnone  wp-image-117" title="TypeMatrix vs K350" src="http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/DSC_1945.jpg" alt="" width="479" height="317" /></a>

But this aren't the main advantages of the keyboard. The most awesome thing about it is how the keys are arranged. As you can see in the photo, all keys are in straight vertical columns. Look down at your keyboard, what do you see? Each lower row of keys is shifted a bit to the right. Do you think that was designed for comfort? Think again. It isn't comfortable, but people are so used to them that it doesn't cross their minds changing the design. The TypeMatrix comes to break this legacy (more than a century old) and show the world how a better keyboard should look like. Typing is a real pleasure, and your wpm does go up once you get through the 4 weeks accommodation phase (measured on myself). I did  manage to continue typing on regular keyboards so I don't think there is a risk you won't be able to use regular keyboards after you do the switch.

The sellers promises less wrist pain for people that do type a lot, but I can't really judge about it as I did not have issues why my standard office keyboard. (I did get a personal ergonomic mouse as the office one did cause me wrist pain very often).

And now it's time to enumerate the pros and the cons for this keyboards.

Pros:
<ul>
	<li>Smaller than regular keyboards. (at the cons I'll add the lack of a numeric pad, but personally I don't use it so I don't see why I should waste space with it)</li>
	<li>Navigation keys easy to access without moving your hand.</li>
	<li>Del, Backspace and Enter are positioned in the center and can be easily accessed by both hands. Also the chance of accidental pressing the Enter key is greatly reduced.</li>
	<li>The function keys can be of some help, like volume up/down, mute.</li>
	<li>The Caps Lock is not where it used to be. No more accidental upper case typing. (I never use it, and to be frank I don't even know where it is located on my clean version).</li>
	<li>The F keys are upper the numeric, in the same order, so if you have muscle memory for the numeric keys (blind typing?), it's easier to blind-hit the F key.</li>
	<li>Comes in clean white (no key markings). Also in QWERTY, AZERTY and Dvorak.</li>
</ul>
And for the Cons:
<ul>
	<li>No num pad. Not a biggie if you don't use them.</li>
	<li>They come only in white (after 3 months of usage looks dirty, compared to black which seem clean even after a year).</li>
	<li>Wired only. I prefer wireless keyboards.. just because I'm a geek.</li>
	<li>Build quality feels a bit cheap. Made in China.</li>
	<li>Hugely overpriced. For the build quality, and the Made in China label the keyboard comes at an astonishing price of 110 USD. I'd call it the main setback why you haven't seen one before.</li>
</ul>
To close this post, I do recommend you get one of these if the price doesn't scare you off. It will take a bit of time to get used to, but it's totally worth it. The website: <a href="http://www.typematrix.com/">http://www.typematrix.com</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2012-06-09 12:48:23</wp:post_date>
		<wp:post_date_gmt>2012-06-09 10:48:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>typematrix-2020-review</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="keyboard"><![CDATA[keyboard]]></category>
		<category domain="category" nicename="reviews"><![CDATA[Reviews]]></category>
		<category domain="post_tag" nicename="typematrix"><![CDATA[typematrix]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>14007</wp:comment_id>
			<wp:comment_author><![CDATA[Michaël M]]></wp:comment_author>
			<wp:comment_author_email>lasteppe@qq.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>89.170.167.164</wp:comment_author_IP>
			<wp:comment_date>2013-08-06 14:51:52</wp:comment_date>
			<wp:comment_date_gmt>2013-08-06 12:51:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[First day with a Typematrix.

It's a blank keyboard with a bépo skin (French dvorak). I'm not used to type with a skin but it protects the keyboard and help me to be used to the keys. There's a good chance that it will go back to its box after some times.

The caps lock is on the far right, under the mail key. I never use it anyway.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380280285.9512689;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380280123.0826399;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380280798.944263;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380280630.0245061;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380280412.8954461;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375793512.6754279;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13690</wp:comment_id>
			<wp:comment_author><![CDATA[TrueFalcon]]></wp:comment_author>
			<wp:comment_author_email>thetruefalcon@hotmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.162.81.12</wp:comment_author_IP>
			<wp:comment_date>2013-07-20 02:47:31</wp:comment_date>
			<wp:comment_date_gmt>2013-07-20 00:47:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great keyboard!

Dvorak typist since 1991.

TypeMatrix typist since 2004.

[WORDPRESS HASHCASH] The poster sent us '0 which is not a hashcash value.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375002997.0300009;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1374281251.162704;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1375001843.472631;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14947</wp:comment_id>
			<wp:comment_author><![CDATA[Radu]]></wp:comment_author>
			<wp:comment_author_email>haiduc32@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.24.41.252</wp:comment_author_IP>
			<wp:comment_date>2013-09-30 21:36:45</wp:comment_date>
			<wp:comment_date_gmt>2013-09-30 19:36:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I also got a skin, but I found it unusable. And using it in blank at the office is way too much fun :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>14007</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380569806.0325201;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>SignalR - the power of WebSocket at your fingertips</title>
		<link>http://www.blog.cyberkinetx.com/2012/06/16/signalr-the-power-of-websocket-at-your-fingertips/</link>
		<pubDate>Sat, 16 Jun 2012 20:50:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[A few months back, Scott Hanselman had a <a href="http://www.hanselman.com/blog/AsynchronousScalableWebApplicationsWithRealtimePersistentLongrunningConnectionsWithSignalR.aspx">blog post about SignalR</a>. It was inspiring, but yesterday when I wanted to give it a shot, it proved to be not of much help as far as examples go.

It took me a bit of googling to figure out how to use the SignalR, so I decided to have a post of my own on getting started with SignalR.<!--more-->

First of all, a bit of introduction. What is SignalR? It's a framework for using the new WebSocket that was introduced in HTML5. It allows you to have 2 way communication between the browser and the server without using polling. A great thing if you want to build a browser based MMOG (I'm not sure how good it can handle the first M). As mentioned earlier, Scott has got a good post about it, you should really check it out.

Just as Scott I've decided to go with a chat application for checking it out. Scott's post wasn't helpful, so after googling found an example that was much clearer to implement <a href="http://geekswithblogs.net/jeroenb/archive/2011/12/14/signalr-starter-application.aspx">SignalR: example chat application</a>. Also the <a href="https://github.com/SignalR/SignalR/wiki">SingalR Github Wiki</a> proved to be of some help.

What we want is a way to push messages from one browser client to any other browser clients that are currently connected to our chat page. SignalR has a concept of Hubs. To my understanding it's like a service. It can have multiple methods on it. For my chat application only 2 are requried: Join and Message. First will register the new browser client with a name, and sencond will dispatch messages to all the other users that are connected.

First I'll create a new empty Asp.Net web application with a default.aspx. Then, add the SignalR package with NuGet. The important parts in the default.aspx are the required javascripts (the versions could be different for you):

[html]
&lt;script type=&quot;text/javascript&quot; src=&quot;Scripts/jquery-1.6.4.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;Scripts/jquery.signalR-0.5.1.min.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/signalr/hubs&quot;&gt;&lt;/script&gt;
[/html]

Next, we need to have a text box, a button and a list to show the messages:

[html]&lt;script type=&quot;text/javascript&quot;&gt;
var chat = $.connection.chatHub;

            //login to chat
            $.connection.hub.start().done(function () {
                chat.join($('#name').val(), function (value) {
                    $('#messages').append('
	&lt;li&gt;' + value + '&lt;/li&gt;');
                });
            });

            chat.addMessage = function (message) {
                $('#messages').append('
	&lt;li&gt;' + message + '&lt;/li&gt;');
            };

            $(&quot;#broadcast&quot;).click(function () {
                var message = $('#msg').val();
                chat.message(message);
                $('#messages').append('
	&lt;li&gt;You: ' + message + '&lt;/li&gt;');
            });
&lt;/script&gt;
&lt;div id=&quot;messageDiv&quot;&gt;
   &lt;input id=&quot;msg&quot; type=&quot;text&quot; /&gt;
   &lt;input id=&quot;broadcast&quot; type=&quot;button&quot; value=&quot;send&quot; /&gt;
&lt;/div&gt;
[/html]

chatHub is the name of the hub, that is registered in the C# code. The join and message are the functions that are called on the server side, it doesn't require any configuration. The addMessage is a callback that is executed when you call the addMessage on the server side:

[csharp]
[HubName(&quot;chatHub&quot;)]
public class ChatHub : Hub
{
    public string Join(string myName)
    {
        ...
    }

    public void Message(string message)
    {
        Clients.addMessage(message);
    }
}
[/csharp]

This is really all that you have to do for a minimal setup. There is a lot of "magic" being done behind in JavaScript code and C#, but you don't have to bother about it. There is also a lower level interface, if you need custom stuff, but you should check the SignalR Wiki for more info on that.

An important aspect that you have to keep in mind is that the ChatHub will be instantiated for each request. If you need to keep track of your users, and have some business logic, you'll have to setup static variables or create another class to handle the logic.

I created a Windows Azure trial account and deployed my web application (a bit enhanced) on <a href="http://signalr.azurewebsites.net/">http://signalr.azurewebsites.net/</a>. Just open it in 2 tabs and see how it goes (my first tries proved it to be kind of slow, but I do suspect it's a configuration issue as on my local machine it does work pretty fast). All that being said, you can <a href="http://www.blog.cyberkinetx.com/wp-content/uploads/2012/06/WebApplication2.zip">download</a> the source code and tinker with it.

Happy coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2012-06-16 22:50:20</wp:post_date>
		<wp:post_date_gmt>2012-06-16 20:50:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>signalr-the-power-of-websocket-at-your-fingertips</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>478</wp:comment_id>
			<wp:comment_author><![CDATA[david]]></wp:comment_author>
			<wp:comment_author_email>david@venetasoft.it</wp:comment_author_email>
			<wp:comment_author_url>http://www.venetasoft.it</wp:comment_author_url>
			<wp:comment_author_IP>2.224.46.45</wp:comment_author_IP>
			<wp:comment_date>2012-07-18 02:33:50</wp:comment_date>
			<wp:comment_date_gmt>2012-07-18 00:33:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for your article, very clear and complete!!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342571631.0309";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342677782.5792";s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1342677799.7778";s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>List parameters check</title>
		<link>http://www.blog.cyberkinetx.com/2012/07/09/list-parameters-check/</link>
		<pubDate>Mon, 09 Jul 2012 07:21:07 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=127</guid>
		<description></description>
		<content:encoded><![CDATA[This time a short post about sending list parameters. I've been reading yesterday an interesting <a href="http://thecodelesscode.com/case/6">Kōan</a> about sending list parameters and validating list parameters, and by a strange coincidence, later on I found a very nasty bug in my code related to lists.

I've seen uncountable times people checking the input parameter, a list one, for null or empty before considering that there is nothing to process. Just as many times I've seen people sending null for the list parameter if there was nothing to send.

Let's dissect the call to a method with a list parameter.

[csharp]
public void CheckOut(List&lt;Product&gt; products)
{
    //..don't care for the implementation now
}
[/csharp]

If the customer has 0 products in his cart, what will be passed in the products parameter? null? Your cart is empty, so how about sending an empty list of products to CheckOut. (Of course this might not be the best way, you should probably have a verification before, but also the CheckOut should verify that it receives any products.)

Of course null can be used in some cases as a different state of the parameter, not the list. For instance, the optional parameters might be setup to have default value null, which will mean that it has not been passed by the calling code. The bottom line is, there are empty lists, that you should send if you have no elements, and there is the null, that means.. null.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date>2012-07-09 09:21:07</wp:post_date>
		<wp:post_date_gmt>2012-07-09 07:21:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>list-parameters-check</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rounding money</title>
		<link>http://www.blog.cyberkinetx.com/2012/12/22/rounding-money/</link>
		<pubDate>Sat, 22 Dec 2012 21:32:42 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[When working with financial projects, at some point or other you end up splitting some amounts across products, subscriptions, insurers, etc., at which moment you might have to solve the rounding issues. Let's consider a (pretty real) case when you have to split a payment, across multiple subscriptions. Say the customer is subscribed to multiple services, and can pay partially. In this case, some companies will split the money proportionally across the due subscriptions. For simplicity of calculation let's take 3 subscriptions of 1$ each:

Internet - 1$
TV 1$
Phone - 1$

<!--more-->

If the customer chooses to pay 2$ (to delay the suspension of his account), the application will have to split the 2$ across all 3 subscriptions. Now a junior will rush to split  the amounts, and use Round() to two decimal points. That might sound fine if the company doesn't care about loosing 2c (yes, 2 not 1):

2/3 = 0.66666666....
After rounding each will get:
Internet = 0.67
TV = 0.67
Phone = 0.67

Now if you add up 0.67 3 times and get 2.02$, but hey, the customer only payed 2.00$. Let's call it acceptable loses. Consider next scenario, when a customer pays only 1$:

1/3 = 0.33333333....
After rounding each will get:
Internet = 0.33
TV = 0.33
Phone = 0.33

If you add it up 0.33 3 times you get 0.99$. I bet the customer won't like to see on his next bill that he still has to pay 2.01$ instead of 2.00$. . That reminds me of <a title="Office Space" href="http://www.imdb.com/title/tt0151804/">Office Space</a>.

Second option is to split the amount proportionally across the subscriptions and then to round down on all 3 payments. After that subtract from the whole payment, the split payments, and get the amount of error. This error to apply on the last/first subscription. That sounds fine, you don't get rounding errors. Or so you think. Again, in some cases you might end up overpaying the last/first subscription, and underpaying the other 2. Depending how the system is built, even after the customer pays the rest 42$, it might consider that there is still debt on some subscriptions. And the over payed subscription might have the extra cents forever. Let's make each subscription 2$, and the customer will pay 3 installments of 2$ each:

1st installment:
Internet = 2 / 6 * 2 = 0.66
TV = 2 / 6 * 2 = 0.66
Phone = 2 / 6 * 2 = 0.66
Error = 2 - (0.66 * 3) = 0.02 - add it to Phone subscription
Phone = 0.66 + 0.02 = 0.68

2nd installment:
Internet = 0.66 + 0.66 = 1.32
TV = 0.66 + 0.66 = 1.32
Phone = 0.68 + 0.66 + 0.02 (which is the error again) = 1.36

3rd installment:
Internet = 1.32 + 0.66 = 1.98
TV = 1.32 + 0.66 = 1.98
Phone = 1.36 + 0.66 + 0.02 (which is the error again) = 2.04

The total amount is correct, but the distribution is not. In some cases it might not be important. But most of the time it'll be a problem.

Third option (and the most correct one). First of all, take the 2$ and split it by the remaining amount to be payed on each subscription, not the total price of the subscription. This is very important since the rounding error changes how the next payments will be distributed. Next, on each split amount, a round down must be done. Then from the payed amount the split amounts are subtracted to get the rounding error. Now for the most complex part, we iterate through the subscriptions and try to apply the rounding error on the first subscription that still has debt, and apply the maximum amount of the rounding error that we can on that subscription(without over paying). If there is anything left, move to the next subscription and try to apply whatever is left. Repeat until nothing is left of the rounding error. Let's see how this works out:

1st installment:
Internet = 2 / 6 * 2 = 0.66
TV = 2 / 6 * 2 = 0.66
Phone = 2 / 6 * 2 = 0.66
Error = 2 - (0.66 * 3) = 0.02 - add it to Internet subscription
Internet = 0.66 + 0.02 = 0.68

2nd installment:
Internet = 0.68 + 2/4 * 1.32 = 0.68 + 0.66 = 1.34
TV = 0.66 + 2 / 4 * 1.34 = 0.66 + 0.67 = 1.33
Phone = 0.66 + 2 / 4 * 1.34 = 0.66 + 0.67 = 1.33
Error = 2 - ( 0.66 + 0.67 + 0.67 ) = 0.00

3rd installment:
Internet = 1.34 + 2/2 *0.66 = 1.34 + 0.66 = 2.00
TV = 1.33 + 2 / 2 * 0.67 = 1.33 + 0.67 = 2.00
Phone = 1.33 + 2 / 2 * 0.67 = 1.33 + 0.67 = 2.00

What happen here is that all the amounts are correct (as expected). The example failed to show how the error might need to be added to second or third subscription. But to prove it, just consider there is another subscription of just 1c that is first in the list (consider it an exercise for yourself).

And because you've been eager to see some code:

[csharp]
Subscription internet = new Subscription { Due = 2m };
Subscription tv = new Subscription { Due = 2m };
Subscription phone = new Subscription { Due = 2m };

List subscriptions = new List { internet, tv, phone };

DistributePayment(subscriptions, 2m);

//and the method
void DistributePayment(List subscriptions, decimal amount)
{
	//first distribute the payments
	decimal appliedAmount = 0m;
	decimal totalDue = subscriptions.Sum(x=&gt;x.Due);

	foreach (Subscription subscription in subscriptions)
	{
		decimal calculatedAmount = RoundDown(amount / totalDue * subscription.Due);
		subscription.Due -= calculatedAmount;
		appliedAmount += calculatedAmount;
	}

	//now distribute the error (if any)
	decimal error = amount - appliedAmount;
	foreach (Subscription subscription in subscriptions)
	{
		if (error == 0m) break;

		if (subscription.Due &gt; 0m)
		{
			decimal maxApply = Math.Min(error, subscription.Due);
			subscription.Due -= maxApply;
			error -= maxApply;
		}
	}
}

decimal RoundDown(decimal value)
{
	return Math.Floor(value * 100m) / 100m;
}
[/csharp]

Yes, that might sound overkill, but for a serious financial application it's a must. Of course you might need to adjust the algorithm to some specific requirements, but the rule of thumb is: don't loose cents and don't gain cents. If you don't respect that you end up with customers having a credit or debit of 1 and more cents. The amount of rounding error you might have (in smallest currency) is number of subscriptions - 1.

P.S. Never use double or float for representing money, always use decimal. You can google for the reasons.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2012-12-22 23:32:42</wp:post_date>
		<wp:post_date_gmt>2012-12-22 21:32:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rounding-money</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Understanding strings a little better</title>
		<link>http://www.blog.cyberkinetx.com/2013/06/30/understanding-strings-a-little-better/</link>
		<pubDate>Sun, 30 Jun 2013 07:31:24 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://www.blog.cyberkinetx.com/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[This article was born because of 4 lines of code that baffled most of the developers I've shown it to.

[csharp]
string a = &quot;ab&quot;;
string b = &quot;ab&quot;;
bool referenceEquals = object.ReferenceEquals(a, b);
Console.WriteLine(referenceEquals);
[/csharp]

Take a moment to think what you'd expect to get printed on screen, and why.

Now let's check another example:

[csharp]
string a = &quot;ab&quot;;
string b = &quot;a&quot;;
b += &quot;b&quot;;
bool referenceEquals = object.ReferenceEquals(a, b);
Console.WriteLine(referenceEquals);
[/csharp]

Same question here. What will be printed on screen, and why.

By now you might be opening the Visual Studio, copy-pasting the samples and running them, trying to figure out what is wrong with the world. If not, I'll just make it easier for you and tell you that the answer to the first sample is True, and for the second False. Now you most probably have 2 questions that won't let you sleep till you know the answer: first, why in the first sample the output is True? second, why in the second sample the output is different from the first.

To make it even a bit worse, let's revise the samples (might notice similarities with the MSDN samples here):

[csharp]
string a = &quot;ab&quot;;
string b = &quot;ab&quot;;
Console.WriteLine(a == b);
bool referenceEquals = object.ReferenceEquals(a, b);
Console.WriteLine(referenceEquals);
[/csharp]

&nbsp;

[csharp]
string a = &quot;ab&quot;;
string b = &quot;a&quot;;
b += &quot;b&quot;;
Console.WriteLine(a == b);
bool referenceEquals = object.ReferenceEquals(a, b);
Console.WriteLine(referenceEquals);
[/csharp]

I've added a line to compare the value of the strings. <a href="http://msdn.microsoft.com/en-us/library/vstudio/362314fe.aspx" target="_blank">The equality operator compares strings by value, not by reference.</a> The outputs will be:

[csharp]
True
True

True
False
[/csharp]

Now you got your proof that the strings are identical. Also the references are identical in the first sample, but not in the second. From <a href="http://msdn.microsoft.com/en-us/library/system.string.intern.aspx" target="_blank">MSDN</a>:
<blockquote>The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program. Consequently, an instance of a literal string with a particular value only exists once in the system.</blockquote>
In other words, all the literals that you have at the moment of compilation, are added in a table (a pool), with unique values. If you have 2 variables with same string literal, they will both have the same reference, because it's the same string from the string pool. So, in the first sampla, both variables <em>a</em> and <em>b</em> reference the same string from the string pool. On the other hand if you create a string at runtime, it just creates a <strong>new</strong> immutable string object, that's why in the second sample <em>a</em> has a string reference from the pool, and <em>b</em> is a new immutable string object, created at runtime.<em>
</em>

Also there is a method to add your strings to the string pool (or get the existing reference), <a href="http://msdn.microsoft.com/en-us/library/system.string.intern.aspx" target="_blank">String.Intern Method</a>:

[csharp]
string a = &quot;ab&quot;;
string b = &quot;a&quot;;
b = String.Intern(b + &quot;b&quot;);
Console.WriteLine(a == b);
bool referenceEquals = object.ReferenceEquals(a, b);
Console.WriteLine(referenceEquals);
[/csharp]

In this case you'll get both outputs True. The MSDN page on that method also explains a bit more about the strings. During researching for this post I've found another interesting <a href="http://broadcast.oreilly.com/2010/08/understanding-c-stringintern-m.html" target="_blank">article on O'Reilly </a> that explains aspects of String.Intern.

Happy coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2013-06-30 09:31:24</wp:post_date>
		<wp:post_date_gmt>2013-06-30 07:31:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>understanding-strings-a-little-better</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
